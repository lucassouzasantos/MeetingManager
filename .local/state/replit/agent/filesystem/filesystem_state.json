{"file_contents":{"README-LOCAL.md":{"content":"\n# üè† Execu√ß√£o Local do Sistema\n\nEste guia explica como executar o sistema de agendamento de salas em um ambiente local fora do Replit.\n\n## Pr√©-requisitos\n\n- **Node.js 18+** instalado\n- **npm** ou **yarn**\n- **Git** (para clonar o reposit√≥rio)\n- **SQLite** (inclu√≠do) ou **PostgreSQL** (opcional)\n\n## üöÄ Configura√ß√£o Inicial\n\n### 1. Clonar o Projeto\n```bash\ngit clone [url-do-repositorio]\ncd room-booking-system\n```\n\n### 2. Instalar Depend√™ncias\n```bash\nnpm install\n```\n\n### 3. Configurar Banco de Dados\n\n#### Op√ß√£o A: SQLite (Recomendado para Desenvolvimento)\n```bash\n# Criar banco SQLite com dados iniciais\nnpm run setup:sqlite\n```\n\n#### Op√ß√£o B: PostgreSQL Local\n```sql\n-- Criar banco PostgreSQL\nCREATE DATABASE room_booking;\nCREATE USER room_user WITH PASSWORD 'sua_senha';\nGRANT ALL PRIVILEGES ON DATABASE room_booking TO room_user;\n```\n\n### 4. Configurar Vari√°veis de Ambiente\n\nCriar arquivo `.env`:\n```bash\n# Para SQLite (recomendado)\nDATABASE_URL=file:./database.sqlite\n\n# Para PostgreSQL local\n# DATABASE_URL=postgres://room_user:sua_senha@localhost:5432/room_booking\n\nSESSION_SECRET=sua-chave-secreta-muito-longa-e-segura\nPORT=5000\nNODE_ENV=development\n```\n\n### 5. Inicializar Banco (se usando PostgreSQL)\n```bash\nnpm run db:push\nnpm run db:seed\n```\n\n## üéØ Executando o Sistema\n\n### Modo Desenvolvimento\n```bash\nnpm run dev\n```\n\n### Modo Produ√ß√£o Local\n```bash\nnpm run build\nnpm start\n```\n\n## üåê Acessando o Sistema\n\n- **Interface Web**: http://localhost:5000\n- **API**: http://localhost:5000/api\n\n### Credenciais de Teste\n\n**Administradores:**\n- `miriam` / `admin123`\n- `lucas` / `admin123`\n\n**Usu√°rio comum:**\n- `usuario` / `user123`\n\n## üìÅ Estrutura do Projeto Local\n\n```\nroom-booking-system/\n‚îú‚îÄ‚îÄ client/              # Frontend React\n‚îÇ   ‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/  # Componentes UI\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hooks/       # Hooks customizados\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ lib/         # Utilit√°rios\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ pages/       # P√°ginas\n‚îÇ   ‚îî‚îÄ‚îÄ index.html\n‚îú‚îÄ‚îÄ server/              # Backend Express\n‚îÇ   ‚îú‚îÄ‚îÄ auth.ts          # Autentica√ß√£o\n‚îÇ   ‚îú‚îÄ‚îÄ db.ts            # Configura√ß√£o DB\n‚îÇ   ‚îú‚îÄ‚îÄ routes.ts        # Rotas API\n‚îÇ   ‚îî‚îÄ‚îÄ storage.ts       # Acesso a dados\n‚îú‚îÄ‚îÄ shared/              # Schemas compartilhados\n‚îú‚îÄ‚îÄ scripts/             # Scripts utilit√°rios\n‚îú‚îÄ‚îÄ database.sqlite      # Banco SQLite (gerado)\n‚îî‚îÄ‚îÄ package.json\n```\n\n## üîß Scripts Dispon√≠veis\n\n```bash\n# Desenvolvimento\nnpm run dev              # Iniciar servidor dev\nnpm run build            # Build produ√ß√£o\nnpm start               # Servidor produ√ß√£o\n\n# Banco de dados\nnpm run db:push         # Aplicar schema\nnpm run setup:sqlite    # Configurar SQLite\n\n# Utilit√°rios\nnpm run check          # Verificar tipos TypeScript\n```\n\n## ‚öôÔ∏è Configura√ß√µes Avan√ßadas\n\n### Banco de Dados\n- **SQLite**: Arquivo `database.sqlite` na raiz\n- **PostgreSQL**: Configure `DATABASE_URL` no `.env`\n\n### Porta e Host\n```bash\n# .env\nPORT=3000                    # Porta customizada\nHOST=0.0.0.0                # Aceitar conex√µes externas\n```\n\n### Vari√°veis de Ambiente Completas\n```bash\n# .env\nDATABASE_URL=file:./database.sqlite\nSESSION_SECRET=chave-super-secreta-de-pelo-menos-32-caracteres\nPORT=5000\nNODE_ENV=development\nVITE_API_URL=http://localhost:5000/api\n```\n\n## üêõ Troubleshooting Local\n\n### Problemas Comuns\n\n**Erro \"EADDRINUSE\" (Porta em uso):**\n```bash\n# Encontrar processo usando a porta\nlsof -ti:5000\n# Matar processo\nkill -9 [PID]\n```\n\n**Erro de permiss√µes SQLite:**\n```bash\n# Dar permiss√µes ao arquivo\nchmod 666 database.sqlite\nchmod 755 .\n```\n\n**Depend√™ncias n√£o encontradas:**\n```bash\n# Limpar cache e reinstalar\nrm -rf node_modules package-lock.json\nnpm install\n```\n\n**Erro de TypeScript:**\n```bash\n# Verificar tipos\nnpm run check\n```\n\n### Logs e Debug\n\n```bash\n# Logs detalhados\nDEBUG=* npm run dev\n\n# Verificar conex√£o do banco\nnode -e \"\nconst db = require('./server/db.js');\nconsole.log('DB connected:', !!db);\n\"\n```\n\n## üöÄ Deploy Local em Rede\n\nPara acessar o sistema em outros dispositivos da rede:\n\n```bash\n# .env\nHOST=0.0.0.0\nPORT=5000\n\n# Acessar via IP da m√°quina\n# http://[SEU-IP]:5000\n```\n\n## üìä Monitoramento Local\n\n### PM2 (Produ√ß√£o Local)\n```bash\n# Instalar PM2\nnpm install -g pm2\n\n# Iniciar com PM2\npm2 start npm --name \"room-booking\" -- start\n\n# Monitorar\npm2 monit\n```\n\n### Logs de Aplica√ß√£o\n```bash\n# Logs em tempo real\ntail -f logs/application.log\n\n# Logs de erro\ntail -f logs/error.log\n```\n\n## üîÑ Backup Local\n\n### SQLite\n```bash\n# Backup do banco\ncp database.sqlite backup/database-$(date +%Y%m%d).sqlite\n\n# Restaurar backup\ncp backup/database-20240827.sqlite database.sqlite\n```\n\n### PostgreSQL\n```bash\n# Backup\npg_dump room_booking > backup/db-$(date +%Y%m%d).sql\n\n# Restaurar\npsql room_booking < backup/db-20240827.sql\n```\n\n---\n\n**Para deployment em produ√ß√£o, consulte a documenta√ß√£o do seu provedor de hospedagem.**\n\n## Comandos √öteis\n\n- `npm run dev` - Inicia em modo desenvolvimento\n- `npm run build` - Compila para produ√ß√£o\n- `npm start` - Inicia em modo produ√ß√£o\n- `npm run db:push` - Atualiza esquema do banco\n- `npm run check` - Verifica tipos TypeScript\n\n## Troubleshooting\n\n### Erro de Conex√£o com Banco\n- Verifique se o PostgreSQL est√° rodando\n- Confirme as credenciais no `.env`\n- Execute `npm run db:push` para criar tabelas\n\n### Porta j√° em uso\n- Mude a vari√°vel `PORT` no arquivo `.env`\n- Ou termine o processo que est√° usando a porta\n\n### Problemas de Autentica√ß√£o\n- Verifique se `SESSION_SECRET` est√° definido\n- Limpe cookies do navegador se necess√°rio\n","size_bytes":5649},"README-SUPABASE.md":{"content":"# üêò Configura√ß√£o com PostgreSQL/Supabase\n\nEste guia explica como configurar o sistema para usar PostgreSQL via Supabase em vez do SQLite padr√£o. Use esta configura√ß√£o para ambientes de produ√ß√£o ou quando precisar de recursos avan√ßados do PostgreSQL.\n\n## ‚ö†Ô∏è Nota Importante\n\n**O sistema est√° configurado para usar SQLite por padr√£o**, que √© mais simples e n√£o requer configura√ß√£o externa. Use PostgreSQL/Supabase apenas se:\n\n- Precisar de recursos avan√ßados do PostgreSQL\n- Estiver em produ√ß√£o\n- Tiver m√∫ltiplos usu√°rios simult√¢neos\n- Quiser compartilhar dados entre inst√¢ncias\n\n## Pr√©-requisitos\n\n- Sistema funcionando com SQLite (configura√ß√£o padr√£o)\n- Conta no Supabase (gratuita)\n\n## Configura√ß√£o do Supabase\n\n### 1. Criar Projeto no Supabase\n\n1. Acesse [https://supabase.com](https://supabase.com)\n2. Fa√ßa login ou crie uma conta\n3. Clique em \"New Project\"\n4. Escolha sua organiza√ß√£o\n5. Preencha:\n   - **Name**: Room Booking System (ou nome de sua escolha)\n   - **Database Password**: Crie uma senha forte e anote\n   - **Region**: Escolha a regi√£o mais pr√≥xima\n6. Clique em \"Create new project\"\n\n### 2. Obter URL de Conex√£o\n\n**IMPORTANTE**: Use a conex√£o direta, n√£o a pooling, pois o Replit pode ter problemas com connection pooling.\n\n1. No painel do Supabase, v√° para **Settings** > **Database**\n2. Na se√ß√£o \"Connection string\", copie a URI sob **Direct connection** (n√£o use pooling)\n3. Substitua `[YOUR-PASSWORD]` pela senha que voc√™ criou\n4. A URL deve ter o formato:\n   ```\n   postgresql://postgres:your-password@db.your-project-ref.supabase.co:5432/postgres\n   ```\n\n**Exemplo correto**:\n```\npostgresql://postgres:mypassword123@db.abcdefghijk.supabase.co:5432/postgres\n```\n\n**ATEN√á√ÉO**: \n- Use **Direct connection**, N√ÉO connection pooling\n- Certifique-se de que a porta seja **5432**\n- O banco deve ser **postgres** no final da URL\n\n### 3. Configurar Vari√°veis de Ambiente\n\nVoc√™ precisar√° adicionar a URL do banco de dados como uma vari√°vel de ambiente secreta no Replit:\n\n1. No Replit, v√° para a aba \"Secrets\" (√≠cone de chave no painel lateral)\n2. Adicione uma nova secret:\n   - **Key**: `DATABASE_URL`\n   - **Value**: A URL de conex√£o que voc√™ copiou do Supabase\n\n### 4. Executar Migra√ß√µes\n\nAp√≥s configurar a DATABASE_URL, execute as migra√ß√µes para criar as tabelas:\n\n```bash\nnpm run db:migrate\n```\n\n### 5. Configurar o Sistema para PostgreSQL\n\nAltere a configura√ß√£o do sistema para usar PostgreSQL em vez de SQLite:\n\n```bash\n# Edite server/db.ts e altere a linha:\n# const databaseUrl = 'file:./database.sqlite';\n# para:\n# const databaseUrl = process.env.DATABASE_URL || 'file:./database.sqlite';\n```\n\n### 6. Criar Tabelas Manualmente\n\nComo o sistema est√° otimizado para SQLite, voc√™ precisar√° criar as tabelas manualmente no Supabase:\n\n1. V√° para **SQL Editor** no painel do Supabase\n2. Execute este script SQL:\n\n## Rodando Localmente\n\n### 1. Instalar Depend√™ncias\n\n```bash\nnpm install\n```\n\n### 2. Configurar Vari√°veis de Ambiente\n\nSe estiver rodando localmente (n√£o no Replit), crie um arquivo `.env` na raiz do projeto:\n\n```env\nSESSION_SECRET=your-super-secret-session-key-for-authentication-should-be-at-least-32-characters-long\nDATABASE_URL=postgresql://postgres.your-project-ref:your-password@aws-0-sa-east-1.pooler.supabase.com:6543/postgres\n```\n\n### 3. Executar Migra√ß√µes\n\n```bash\nnpm run db:migrate\n```\n\n### 4. Executar Seed (Opcional)\n\n```bash\nnpm run db:seed\n```\n\n### 5. Iniciar o Servidor\n\n```bash\nnpm run dev\n```\n\nO sistema estar√° dispon√≠vel em `http://localhost:5000`\n\n## Scripts Dispon√≠veis\n\n- `npm run dev` - Inicia o servidor de desenvolvimento\n- `npm run build` - Compila o projeto para produ√ß√£o\n- `npm run db:generate` - Gera migra√ß√µes baseadas no schema\n- `npm run db:migrate` - Executa migra√ß√µes pendentes\n- `npm run db:seed` - Insere dados iniciais\n\n## Estrutura do Banco\n\nO sistema criar√° automaticamente as seguintes tabelas:\n\n- **users** - Usu√°rios do sistema\n- **rooms** - Salas de reuni√£o\n- **bookings** - Agendamentos\n\n## Funcionalidades\n\n- ‚úÖ Autentica√ß√£o de usu√°rios\n- ‚úÖ Gest√£o de salas (admin)\n- ‚úÖ Agendamento de reuni√µes\n- ‚úÖ Dashboard administrativo\n- ‚úÖ Gest√£o de usu√°rios (admin)\n- ‚úÖ Trocar senha de usu√°rios (admin)\n- ‚úÖ Verifica√ß√£o de conflitos de hor√°rio\n- ‚úÖ Interface responsiva\n\n## Problemas Comuns\n\n### ‚ùå Timeout de Conex√£o (ETIMEDOUT)\n**Problema**: `connect ETIMEDOUT` ou `Connection terminated due to connection timeout`\n\n**Solu√ß√µes**:\n1. **Verifique a URL**: Use **Direct connection**, n√£o connection pooling\n2. **Formato correto**: `postgresql://postgres:password@db.ref.supabase.co:5432/postgres`\n3. **Teste no Supabase**: No painel do Supabase, v√° em SQL Editor e execute `SELECT NOW();` para testar se o banco est√° funcionando\n4. **IP do Replit**: Alguns projetos Supabase limitam conex√µes por IP. Desabilite isso em Settings > Database > Network Restrictions\n\n### ‚ùå Erro de Autentica√ß√£o\n- Confirme que a senha na URL est√° correta (sem caracteres especiais codificados)\n- Teste fazer login direto no painel do Supabase com a mesma senha\n\n### ‚ùå Tabelas n√£o existem\n**Solu√ß√£o**: Execute as migra√ß√µes pelo Supabase SQL Editor:\n\n1. V√° para SQL Editor no painel do Supabase\n2. Cole e execute este SQL:\n\n```sql\n-- Criar tabela de usu√°rios\nCREATE TABLE IF NOT EXISTS users (\n    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,\n    username varchar(255) UNIQUE NOT NULL,\n    full_name varchar(255) NOT NULL,\n    email varchar(255) UNIQUE NOT NULL,\n    position varchar(255),\n    password varchar(255) NOT NULL,\n    is_admin boolean DEFAULT false,\n    created_at timestamp DEFAULT now()\n);\n\n-- Criar tabela de salas\nCREATE TABLE IF NOT EXISTS rooms (\n    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,\n    name varchar(255) NOT NULL,\n    location varchar(255) NOT NULL,\n    capacity integer NOT NULL,\n    is_active boolean DEFAULT true,\n    created_at timestamp DEFAULT now()\n);\n\n-- Criar tabela de agendamentos\nCREATE TABLE IF NOT EXISTS bookings (\n    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,\n    title varchar(255) NOT NULL,\n    description text,\n    date varchar(10) NOT NULL,\n    start_time varchar(5) NOT NULL,\n    end_time varchar(5) NOT NULL,\n    status varchar(20) DEFAULT 'confirmed',\n    user_id uuid REFERENCES users(id) ON DELETE CASCADE,\n    room_id uuid REFERENCES rooms(id) ON DELETE CASCADE,\n    created_at timestamp DEFAULT now()\n);\n```\n\n### ‚úÖ Voltar para SQLite (Recomendado)\nSe houver problemas com Supabase, volte para SQLite:\n\n1. Remova ou comente a DATABASE_URL nos Secrets do Replit\n2. O sistema voltar√° automaticamente para SQLite\n3. Execute: `tsx scripts/simple-seed.ts` para recriar os dados\n\n### ‚ùå Erro de SSL\nSe houver problemas com SSL, adicione `?sslmode=require` no final da URL\n\n## Suporte\n\nPara problemas ou d√∫vidas, verifique:\n1. Se todas as depend√™ncias foram instaladas (`npm install`)\n2. Se a DATABASE_URL est√° configurada corretamente\n3. Se as migra√ß√µes foram executadas (`npm run db:migrate`)\n4. Se o seed foi executado (`npm run db:seed`)","size_bytes":7078},"README.md":{"content":"# Sistema de Agendamento de Salas de Reuni√£o\n\nUm sistema completo de gerenciamento de reservas de salas, desenvolvido em TypeScript com React, Express.js e SQLite/PostgreSQL.\n\n## üöÄ Funcionalidades\n\n### üë§ Para Usu√°rios\n- **Autentica√ß√£o segura** com login por usu√°rio/email e senha\n- **Visualiza√ß√£o de salas** dispon√≠veis com informa√ß√µes detalhadas\n- **Criar agendamentos** com verifica√ß√£o autom√°tica de conflitos\n- **Gerenciar reservas** pessoais (visualizar, cancelar)\n- **Interface responsiva** com suporte a tema claro/escuro\n\n### üë®‚Äçüíº Para Administradores\n- **Dashboard administrativo** com estat√≠sticas em tempo real\n- **Gerenciar salas** (criar, editar, desativar)\n- **Gerenciar usu√°rios** (visualizar, promover/despromover admin, alterar senhas)\n- **Visualizar todos os agendamentos** do sistema\n- **Estat√≠sticas de ocupa√ß√£o** e uso das salas\n\n## üõ†Ô∏è Tecnologias\n\n### Frontend\n- **React 18** com TypeScript\n- **Tailwind CSS** + **shadcn/ui** para interface moderna\n- **TanStack Query** para gerenciamento de estado do servidor\n- **React Hook Form** + **Zod** para formul√°rios tipados\n- **Wouter** para roteamento leve\n\n### Backend\n- **Express.js** com TypeScript\n- **Drizzle ORM** para opera√ß√µes de banco tipadas\n- **Passport.js** para autentica√ß√£o\n- **Express Session** para gerenciamento de sess√µes\n- **Zod** para valida√ß√£o de dados\n\n### Banco de Dados\n- **SQLite** (padr√£o) ou **PostgreSQL/Supabase**\n- **Drizzle Kit** para migra√ß√µes\n- **Tipagem completa** com schemas compartilhados\n\n## üèÅ In√≠cio R√°pido\n\n### 1. Configura√ß√£o Inicial\n\n```bash\n# Clonar reposit√≥rio (se aplic√°vel)\ngit clone [url-do-repositorio]\n\n# As depend√™ncias j√° est√£o instaladas no Replit\n# Para instala√ß√£o local: npm install\n```\n\n### 2. Executar o Sistema\n\n```bash\n# Iniciar servidor de desenvolvimento\nnpm run dev\n```\n\nO sistema estar√° dispon√≠vel em `http://localhost:5000`\n\n### 3. Dados Iniciais\n\nO sistema j√° vem com dados de exemplo:\n\n**Administradores:**\n- `miriam` / `admin123` (mzocche@pindo.com.py)\n- `lucas` / `admin123` (lucassouza@pindo.com.py)\n\n**Usu√°rio comum:**\n- `usuario` / `user123` (usuario@empresa.com)\n\n**Salas dispon√≠veis:**\n- Sala de Reuni√£o Principal (12 pessoas)\n- Sala de Videoconfer√™ncia (8 pessoas)\n- Audit√≥rio (50 pessoas)\n- Sala de Brainstorm (6 pessoas)\n\n## üìã Como Usar\n\n### Para Usu√°rios Comuns\n\n1. **Login**: Use suas credenciais na tela inicial\n2. **Navegar**: Use o menu lateral para acessar diferentes se√ß√µes\n3. **Agendar Sala**: \n   - V√° em \"Novo Agendamento\"\n   - Escolha sala, data, hor√°rio e adicione detalhes\n   - O sistema verificar√° automaticamente conflitos\n4. **Gerenciar Reservas**: Veja seus agendamentos em \"Meus Agendamentos\"\n\n### Para Administradores\n\n1. **Dashboard**: Visualize estat√≠sticas gerais do sistema\n2. **Gerenciar Salas**: \n   - Criar novas salas\n   - Editar informa√ß√µes (nome, localiza√ß√£o, capacidade)\n   - Desativar salas temporariamente\n3. **Gerenciar Usu√°rios**:\n   - Ver todos os usu√°rios cadastrados\n   - Promover/despromover administradores\n   - Alterar senhas de usu√°rios\n4. **Todos os Agendamentos**: Visualizar reservas de todos os usu√°rios\n\n## üóÑÔ∏è Banco de Dados\n\n### SQLite (Configura√ß√£o Atual)\n- **Arquivo**: `database.sqlite` na raiz do projeto\n- **Vantagens**: Simples, sem configura√ß√£o externa\n- **Ideal para**: Desenvolvimento, testes, pequenas equipes\n\n### PostgreSQL/Supabase (Opcional)\n- **Configura√ß√£o**: Ver `README-SUPABASE.md`\n- **Vantagens**: Mais robusto, recursos avan√ßados\n- **Ideal para**: Produ√ß√£o, grandes equipes\n\n## üîê Seguran√ßa\n\n- **Autentica√ß√£o**: Sess√µes seguras com express-session\n- **Senhas**: Hash com scrypt + salt\n- **Autoriza√ß√£o**: Controle de acesso baseado em roles\n- **Valida√ß√£o**: Schemas Zod em frontend e backend\n- **SQL Injection**: Prote√ß√£o via Drizzle ORM\n\n## üìÅ Estrutura do Projeto\n\n```\n‚îú‚îÄ‚îÄ client/              # Frontend React\n‚îÇ   ‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/  # Componentes UI\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hooks/       # Hooks customizados\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ lib/         # Utilit√°rios e configura√ß√µes\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ pages/       # P√°ginas da aplica√ß√£o\n‚îÇ   ‚îî‚îÄ‚îÄ index.html\n‚îú‚îÄ‚îÄ server/              # Backend Express\n‚îÇ   ‚îú‚îÄ‚îÄ auth.ts          # Configura√ß√£o de autentica√ß√£o\n‚îÇ   ‚îú‚îÄ‚îÄ db.ts            # Configura√ß√£o do banco\n‚îÇ   ‚îú‚îÄ‚îÄ routes.ts        # Rotas da API\n‚îÇ   ‚îî‚îÄ‚îÄ storage.ts       # Camada de acesso a dados\n‚îú‚îÄ‚îÄ shared/              # Tipos e schemas compartilhados\n‚îÇ   ‚îî‚îÄ‚îÄ schema.ts\n‚îú‚îÄ‚îÄ scripts/             # Scripts de setup e utilit√°rios\n‚îî‚îÄ‚îÄ migrations/          # Migra√ß√µes do banco\n```\n\n## üöÄ Deployment\n\n### Replit (Recomendado)\n- O sistema est√° configurado para rodar no Replit\n- Use o bot√£o \"Deploy\" para publicar\n- SSL e dom√≠nio autom√°ticos\n\n### Outros Provedores\n```bash\n# Build para produ√ß√£o\nnpm run build\n\n# Iniciar servidor\nnpm start\n```\n\n## üîß Scripts Dispon√≠veis\n\n```bash\nnpm run dev        # Desenvolvimento\nnpm run build      # Build para produ√ß√£o\nnpm start          # Servidor de produ√ß√£o\nnpm run check      # Verifica√ß√£o de tipos\nnpm run db:push    # Aplicar mudan√ßas no schema\n```\n\n## üìö Documenta√ß√£o Adicional\n\n- **`README-SUPABASE.md`**: Configura√ß√£o com PostgreSQL/Supabase\n- **`README-LOCAL.md`**: Execu√ß√£o em ambiente local\n- **`replit.md`**: Documenta√ß√£o t√©cnica detalhada\n\n## üÜò Suporte e Troubleshooting\n\n### Problemas Comuns\n\n**Login n√£o funciona:**\n- Verificar credenciais\n- Confirmar se o banco foi inicializado\n\n**Erro ao agendar sala:**\n- Verificar se a sala est√° ativa\n- Confirmar se n√£o h√° conflito de hor√°rio\n\n**Interface n√£o carrega:**\n- Verificar se o servidor est√° rodando\n- Confirmar se as depend√™ncias foram instaladas\n\n### Logs e Debug\n- Logs do servidor aparecem no console\n- Erros do frontend aparecem no DevTools do navegador\n\n## üë®‚Äçüíª Desenvolvimento\n\n### Tecnologias e Padr√µes\n- **TypeScript strict** para tipagem completa\n- **ESM modules** em todo o projeto\n- **Schemas compartilhados** entre frontend/backend\n- **Valida√ß√£o dupla** (client + server)\n- **Componentes reutiliz√°veis** com shadcn/ui\n\n### Contribuindo\n1. Mantenha a tipagem rigorosa\n2. Use os schemas compartilhados\n3. Valide dados no frontend e backend\n4. Teste em diferentes resolu√ß√µes\n5. Documente mudan√ßas significativas no `replit.md`\n\n---\n\n**Sistema desenvolvido com foco em usabilidade, seguran√ßa e manutenibilidade.**","size_bytes":6521},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Room Booking Management System\n\n## Overview\n\nThis is a full-stack room booking management system built with React, TypeScript, Express.js, and SQLite/PostgreSQL. The application provides a comprehensive solution for managing meeting rooms and their bookings within an organization. Users can view available rooms, create bookings, and administrators have additional privileges to manage rooms and users.\n\nThe system features a modern, responsive interface built with shadcn/ui components and Tailwind CSS, offering both light and dark theme support. The application implements secure authentication with session management and role-based access control.\n\n**Current Status**: Sistema funcionando completamente com SQLite como banco de dados principal. PostgreSQL/Supabase dispon√≠vel como op√ß√£o alternativa via configura√ß√£o manual.\n\n**Last Updated**: September 2, 2025 - Funcionalidade de cancelamento administrativo implementada, permitindo que administradores cancelem qualquer reserva.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes\n\n- **2025-09-02**: Implementa√ß√£o de cancelamento administrativo - admins podem cancelar qualquer reserva\n- **2025-09-02**: Corre√ß√£o de erro de restri√ß√£o de chave estrangeira no sistema de asigna√ß√£o de usuarios de cocina  \n- **2025-09-02**: Valida√ß√£o robusta para assignedKitchenUserId com manejo de valores null/empty/\"none\"\n- **2024-08-28**: Migra√ß√£o completa para SQLite como banco padr√£o\n- **2024-08-28**: Corre√ß√£o de erros de login e queries do React Query\n- **2024-08-28**: Ajustes de compatibilidade SQLite (convers√£o booleanos para n√∫meros)\n- **2024-08-28**: Implementa√ß√£o de funcionalidade completa de altera√ß√£o de senhas\n\n## Current System Status\n\n### ‚úÖ Funcionando Completamente\n- Sistema de login e autentica√ß√£o\n- Dashboard administrativo com estat√≠sticas\n- Gest√£o de salas (criar, editar, desativar)\n- Gest√£o de usu√°rios (promover admin, alterar senhas)\n- Sistema de agendamentos com verifica√ß√£o de conflitos\n- **Sistema de cancelamento administrativo - admins podem cancelar qualquer reserva**\n- **Sistema de gest√£o de usu√°rios de cocina com valida√ß√£o robusta**\n- Interface responsiva com tema claro/escuro\n\n### üóÑÔ∏è Banco de Dados Atual\n- **Tipo**: SQLite (arquivo local `database.sqlite`)\n- **Vantagens**: Simples, sem depend√™ncias externas, r√°pido\n- **Status**: Totalmente funcional e otimizado\n\n### üë• Usu√°rios de Teste\n- **Admin**: miriam / admin123 (mzocche@pindo.com.py)\n- **Admin**: lucas / admin123 (lucassouza@pindo.com.py)\n- **User**: usuario / user123 (usuario@empresa.com)\n\n### üè¢ Salas Dispon√≠veis\n- Sala de Reuni√£o Principal (12 pessoas)\n- Sala de Videoconfer√™ncia (8 pessoas)\n- Audit√≥rio (50 pessoas)\n- Sala de Brainstorm (6 pessoas)\n\n## System Architecture\n\n### Frontend Architecture\n\nThe client-side application is built using **React 18** with **TypeScript** for type safety. The architecture follows modern React patterns:\n\n- **Component Structure**: Uses shadcn/ui components built on top of Radix UI primitives for accessibility and consistency\n- **State Management**: Leverages TanStack Query (React Query) for server state management, caching, and data synchronization\n- **Routing**: Implements wouter for lightweight client-side routing with protected route patterns\n- **Styling**: Utilizes Tailwind CSS with CSS custom properties for theming and responsive design\n- **Form Handling**: Uses React Hook Form with Zod schema validation for type-safe form management\n- **Authentication Context**: Provides global authentication state management through React Context\n\n### Backend Architecture\n\nThe server-side is built with **Express.js** using a modular architecture:\n\n- **Authentication Layer**: Implements Passport.js with local strategy for username/email and password authentication\n- **Session Management**: Uses express-session with PostgreSQL store for persistent sessions\n- **Password Security**: Employs Node.js crypto module with scrypt for secure password hashing\n- **API Routes**: RESTful API design with role-based access control for admin functions\n- **Database Layer**: Drizzle ORM provides type-safe database operations with schema validation\n- **Error Handling**: Centralized error handling middleware with proper HTTP status codes\n\n### Database Design\n\nThe application uses **SQLite** (default) or **PostgreSQL** with Drizzle ORM for database operations:\n\n- **Users Table**: Stores user credentials, profile information, and admin status (integer for booleans in SQLite)\n- **Rooms Table**: Contains room details including name, location, capacity, and active status\n- **Bookings Table**: Manages booking records with foreign keys to users and rooms\n- **Relationships**: Properly defined foreign key constraints and relations between entities\n- **Schema Validation**: Zod schemas ensure data integrity at both API and database levels\n- **SQLite Compatibility**: Boolean values stored as integers (0/1) for SQLite compatibility\n\n### Authentication & Authorization\n\nThe system implements a robust authentication mechanism:\n\n- **Session-based Authentication**: Secure session management with MemoryStore for SQLite\n- **Role-based Access Control**: Differentiates between regular users and administrators\n- **Password Security**: Uses scrypt hashing with salt for secure password storage\n- **Login Flexibility**: Supports login with username or email address\n- **Protected Routes**: Client-side route protection with authentication state checking\n- **Dual Login Support**: Allows login with either username or email address\n\n### Data Validation & Type Safety\n\nThe application maintains type safety throughout the stack:\n\n- **Shared Schema**: Common TypeScript types and Zod schemas shared between client and server\n- **Runtime Validation**: All API inputs validated using Zod schemas\n- **Type Generation**: Drizzle ORM generates TypeScript types from database schema\n- **Form Validation**: Client-side validation with React Hook Form and Zod resolvers\n\n### Development Tooling\n\nThe project includes comprehensive development tools:\n\n- **Build System**: Vite for fast development and optimized production builds\n- **TypeScript Configuration**: Strict TypeScript settings with path mapping for clean imports\n- **Database Migrations**: Drizzle Kit for schema migrations and database management\n- **Code Organization**: Clear separation of concerns with shared utilities and components\n\n## External Dependencies\n\n### Core Technologies\n- **better-sqlite3**: SQLite database driver for local development\n- **pg**: PostgreSQL driver for production/Supabase (optional)\n- **drizzle-orm**: Type-safe ORM for database operations and query building\n- **@tanstack/react-query**: Server state management and data fetching library\n- **passport**: Authentication middleware for Express.js applications\n- **express-session**: Session management middleware with MemoryStore\n- **memorystore**: Session store for development with SQLite\n\n### UI & Styling\n- **@radix-ui/***: Accessible, unstyled UI component primitives\n- **tailwindcss**: Utility-first CSS framework for rapid UI development\n- **class-variance-authority**: Utility for creating variant-based component APIs\n- **lucide-react**: Icon library providing consistent iconography\n\n### Form & Validation\n- **react-hook-form**: Performant forms library with minimal re-renders\n- **@hookform/resolvers**: Integration between React Hook Form and validation libraries\n- **zod**: TypeScript-first schema validation library\n- **drizzle-zod**: Integration between Drizzle ORM and Zod for schema validation\n\n### Development Tools\n- **vite**: Next-generation frontend build tool with fast HMR\n- **tsx**: TypeScript execution environment for development server\n- **esbuild**: Fast JavaScript bundler for production builds\n- **drizzle-kit**: Database schema management and migration tool\n\n### Additional Libraries\n- **date-fns**: Modern JavaScript date utility library\n- **wouter**: Lightweight routing library for React applications\n- **cmdk**: Command palette component for enhanced user experience\n- **embla-carousel-react**: Carousel component for interactive content display\n\n## Available Scripts\n\n### Development\n- **`npm run dev`**: Start development server with hot reload\n- **`npm run build`**: Build for production\n- **`npm start`**: Start production server\n- **`npm run check`**: TypeScript type checking\n\n### Database Management\n- **`npm run db:push`**: Apply schema changes to database\n- **`tsx scripts/simple-seed.ts`**: Initialize SQLite with sample data\n- **`tsx scripts/setup-sqlite.ts`**: Full SQLite setup with tables and data\n\n### Utility Scripts\n- **`scripts/simple-seed.ts`**: Current working seed script for SQLite\n- **`scripts/setup-sqlite.ts`**: Alternative setup with more advanced features\n- **`scripts/test-connection.ts`**: Test database connectivity\n\n## Current Architecture Decisions\n\n### Database Choice: SQLite\n**Reasoning**: After attempting Supabase migration, SQLite proved more reliable for this environment\n- **Pros**: No external dependencies, fast setup, zero configuration\n- **Cons**: Single user, file-based storage\n- **Status**: Fully implemented and tested\n\n### Session Management: MemoryStore\n**Reasoning**: Compatible with SQLite, simpler than database-backed sessions\n- **Implementation**: express-session with memorystore package\n- **Limitation**: Sessions reset on server restart (acceptable for development)\n\n### Boolean Storage: Integer Conversion\n**Reasoning**: SQLite doesn't support boolean type natively\n- **Implementation**: Store booleans as integers (0/1) in database queries\n- **Affected Areas**: User admin status, room active status\n\n## Troubleshooting History\n\n### Resolved Issues\n1. **React Query `enabled` prop errors**: Fixed by wrapping with `Boolean()` to ensure proper type\n2. **SQLite boolean binding errors**: Converted all boolean queries to integer (0/1)\n3. **Password update failures**: Fixed by using `.returning()` instead of `.rowCount` for SQLite\n4. **Supabase connectivity timeouts**: Resolved by switching to local SQLite\n\n### Known Limitations\n- **Sessions**: Stored in memory, reset on server restart\n- **Concurrent Access**: SQLite has limitations for multiple simultaneous users\n- **Schema Changes**: Require manual script execution for SQLite\n\n## Deployment Considerations\n\n### Current Setup (Replit)\n- **Database**: SQLite file in workspace\n- **Sessions**: Memory-based\n- **Static Assets**: Served by Vite in development\n- **Build Process**: Available via `npm run build`\n\n### Production Recommendations\n- Consider PostgreSQL for multi-user production\n- Implement Redis or database-backed sessions\n- Set up proper logging and monitoring\n- Configure environment-specific settings\n\n## Development Workflow\n\n### Making Changes\n1. Modify code with hot reload active\n2. Run `npm run check` for type verification\n3. Test functionality manually\n4. Update documentation in this file\n\n### Database Updates\n1. Modify `shared/schema.ts`\n2. Run `npm run db:push` for schema changes\n3. Update seed scripts if needed\n4. Test with fresh database\n\n### Adding Features\n1. Plan schema changes first\n2. Implement backend routes\n3. Add frontend components\n4. Update shared types\n5. Test admin and user flows","size_bytes":11290},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"scripts/migrate.ts":{"content":"import { db, pool } from '../server/db.js';\nimport { migrate } from 'drizzle-orm/node-postgres/migrator';\n\nasync function runMigrations() {\n  console.log('üöÄ Executando migra√ß√µes...');\n  \n  try {\n    await migrate(db, { migrationsFolder: './migrations' });\n    console.log('‚úÖ Migra√ß√µes executadas com sucesso!');\n  } catch (error) {\n    console.error('‚ùå Erro ao executar migra√ß√µes:', error);\n  } finally {\n    await pool.end();\n    process.exit(0);\n  }\n}\n\nrunMigrations();","size_bytes":484},"scripts/seed.ts":{"content":"import { db } from '../server/db.js';\nimport { users, rooms } from '../shared/schema.js';\nimport { hashPassword } from '../server/auth.js';\n\nasync function seed() {\n  console.log('üå± Iniciando seed do banco de dados...');\n\n  try {\n    // Criar usu√°rios iniciais\n    console.log('üë• Criando usu√°rios...');\n    \n    const adminPassword = await hashPassword('admin123');\n    const userPassword = await hashPassword('user123');\n\n    await db.insert(users).values([\n      {\n        username: 'miriam',\n        fullName: 'Miriam Zocche',\n        email: 'miriam@pindo.com.py',\n        position: 'Gerente de Projetos',\n        password: adminPassword,\n        isAdmin: true,\n      },\n      {\n        username: 'lucas',\n        fullName: 'Lucas Souza',\n        email: 'lucas@pindo.com.py',\n        position: 'Coordenador de TI',\n        password: adminPassword,\n        isAdmin: true,\n      },\n      {\n        username: 'joao',\n        fullName: 'Jo√£o Silva',\n        email: 'joao@pindo.com.py',\n        position: 'Analista',\n        password: userPassword,\n        isAdmin: false,\n      },\n      {\n        username: 'maria',\n        fullName: 'Maria Santos',\n        email: 'maria@pindo.com.py',\n        position: 'Coordenadora',\n        password: userPassword,\n        isAdmin: false,\n      },\n      {\n        username: 'pedro',\n        fullName: 'Pedro Costa',\n        email: 'pedro@pindo.com.py',\n        position: 'Desenvolvedor',\n        password: userPassword,\n        isAdmin: false,\n      }\n    ]).onConflictDoNothing();\n\n    console.log('üè¢ Criando salas...');\n    \n    await db.insert(rooms).values([\n      {\n        name: 'Sala Executive Premium',\n        location: '3¬∫ Andar - Ala Oeste',\n        capacity: 12,\n        isActive: true,\n      },\n      {\n        name: 'Sala de Reuni√µes Alpha',\n        location: '2¬∫ Andar - Centro',\n        capacity: 8,\n        isActive: true,\n      },\n      {\n        name: 'Sala de Videoconfer√™ncia',\n        location: '4¬∫ Andar - Ala Norte',\n        capacity: 15,\n        isActive: true,\n      },\n      {\n        name: 'Sala de Brainstorm',\n        location: '1¬∫ Andar - Ala Sul',\n        capacity: 6,\n        isActive: true,\n      },\n      {\n        name: 'Audit√≥rio Principal',\n        location: 'T√©rreo - Centro',\n        capacity: 50,\n        isActive: true,\n      }\n    ]).onConflictDoNothing();\n\n    console.log('‚úÖ Seed conclu√≠do com sucesso!');\n    console.log('');\n    console.log('üë§ Usu√°rios criados:');\n    console.log('  Admin: miriam@pindo.com.py / senha: admin123');\n    console.log('  Admin: lucas@pindo.com.py / senha: admin123');\n    console.log('  User:  joao@pindo.com.py / senha: user123');\n    console.log('  User:  maria@pindo.com.py / senha: user123');\n    console.log('  User:  pedro@pindo.com.py / senha: user123');\n    console.log('');\n    console.log('üè¢ 5 salas criadas');\n\n  } catch (error) {\n    console.error('‚ùå Erro durante o seed:', error);\n  } finally {\n    process.exit(0);\n  }\n}\n\nseed();","size_bytes":2989},"scripts/setup-local.js":{"content":"\n#!/usr/bin/env node\n\nimport fs from 'fs';\nimport { execSync } from 'child_process';\nimport readline from 'readline';\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nconsole.log('üè† Configura√ß√£o do Sistema para Servidor Local\\n');\n\nconst question = (prompt) => new Promise((resolve) => {\n  rl.question(prompt, resolve);\n});\n\nasync function setup() {\n  try {\n    console.log('1Ô∏è‚É£ Verificando depend√™ncias...');\n    \n    // Check if .env exists\n    if (!fs.existsSync('.env')) {\n      console.log('üìù Criando arquivo .env...');\n      \n      const dbUrl = await question('URL do banco PostgreSQL (ex: postgres://user:pass@localhost:5432/room_booking): ');\n      const port = await question('Porta do servidor (padr√£o 3000): ') || '3000';\n      const sessionSecret = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n      \n      const envContent = `# Configura√ß√£o Local\nDATABASE_URL=${dbUrl}\nSESSION_SECRET=${sessionSecret}\nPORT=${port}\nNODE_ENV=development\n`;\n      \n      fs.writeFileSync('.env', envContent);\n      console.log('‚úÖ Arquivo .env criado');\n    }\n    \n    console.log('2Ô∏è‚É£ Instalando depend√™ncias...');\n    execSync('npm install', { stdio: 'inherit' });\n    \n    console.log('3Ô∏è‚É£ Configurando banco de dados...');\n    try {\n      execSync('npm run db:push', { stdio: 'inherit' });\n      console.log('‚úÖ Banco de dados configurado');\n    } catch (error) {\n      console.log('‚ö†Ô∏è  Erro ao configurar banco. Execute manualmente: npm run db:push');\n    }\n    \n    console.log('\\nüéâ Setup conclu√≠do!');\n    console.log('\\nPara iniciar o servidor:');\n    console.log('  npm run dev');\n    console.log(`\\nAcesse: http://localhost:${process.env.PORT || 3000}`);\n    \n  } catch (error) {\n    console.error('‚ùå Erro durante setup:', error.message);\n  } finally {\n    rl.close();\n  }\n}\n\nsetup();\n","size_bytes":1962},"scripts/setup-sqlite.ts":{"content":"#!/usr/bin/env tsx\n\nimport Database from 'better-sqlite3';\nimport { drizzle } from 'drizzle-orm/better-sqlite3';\nimport * as schema from '../shared/schema';\nimport { hashPassword } from '../server/auth';\n\nconsole.log('üóÉÔ∏è  Configurando banco SQLite...');\n\n// Initialize SQLite database\nconst sqlite = new Database('./database.sqlite');\nsqlite.pragma('journal_mode = WAL');\n\n// Create tables using SQL directly for SQLite\nconst createTables = () => {\n  console.log('üî® Criando tabelas...');\n  \n  // Users table\n  sqlite.exec(`\n    CREATE TABLE IF NOT EXISTS users (\n      id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n      username TEXT UNIQUE NOT NULL,\n      full_name TEXT NOT NULL,\n      email TEXT UNIQUE NOT NULL,\n      position TEXT,\n      password TEXT NOT NULL,\n      is_admin INTEGER DEFAULT 0,\n      created_at TEXT DEFAULT CURRENT_TIMESTAMP\n    );\n  `);\n\n  // Rooms table\n  sqlite.exec(`\n    CREATE TABLE IF NOT EXISTS rooms (\n      id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n      name TEXT NOT NULL,\n      location TEXT NOT NULL,\n      capacity INTEGER NOT NULL,\n      is_active INTEGER DEFAULT 1,\n      created_at TEXT DEFAULT CURRENT_TIMESTAMP\n    );\n  `);\n\n  // Bookings table\n  sqlite.exec(`\n    CREATE TABLE IF NOT EXISTS bookings (\n      id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),\n      title TEXT NOT NULL,\n      description TEXT,\n      date TEXT NOT NULL,\n      start_time TEXT NOT NULL,\n      end_time TEXT NOT NULL,\n      status TEXT DEFAULT 'confirmed',\n      user_id TEXT REFERENCES users(id) ON DELETE CASCADE,\n      room_id TEXT REFERENCES rooms(id) ON DELETE CASCADE,\n      created_at TEXT DEFAULT CURRENT_TIMESTAMP\n    );\n  `);\n  \n  console.log('‚úÖ Tabelas criadas');\n};\n\nconst seedData = async () => {\n  console.log('üå± Inserindo dados iniciais...');\n  \n  const db = drizzle(sqlite, { schema });\n  \n  try {\n    // Create admin users\n    console.log('üë• Criando usu√°rios administradores...');\n    \n    const admin1Password = await hashPassword('admin123');\n    const admin2Password = await hashPassword('admin123');\n    \n    await db.insert(schema.users).values([\n      {\n        username: 'miriam',\n        full_name: 'Miriam Zocche',\n        email: 'mzocche@pindo.com.py',\n        position: 'Gerente',\n        password: admin1Password,\n        is_admin: true,\n      },\n      {\n        username: 'lucas',\n        full_name: 'Lucas Souza',\n        email: 'lucassouza@pindo.com.py',\n        position: 'Coordenador',\n        password: admin2Password,\n        is_admin: true,\n      }\n    ]).onConflictDoNothing();\n\n    // Create regular user\n    const userPassword = await hashPassword('user123');\n    \n    await db.insert(schema.users).values({\n      username: 'usuario',\n      full_name: 'Usu√°rio Teste',\n      email: 'usuario@empresa.com',\n      position: 'Funcion√°rio',\n      password: userPassword,\n      is_admin: false,\n    }).onConflictDoNothing();\n\n    console.log('üè¢ Criando salas...');\n    \n    await db.insert(schema.rooms).values([\n      {\n        name: 'Sala de Reuni√£o Principal',\n        location: 'Andar 2 - Sala 201',\n        capacity: 12,\n        is_active: true,\n      },\n      {\n        name: 'Sala de Videoconfer√™ncia',\n        location: 'Andar 3 - Sala 301',\n        capacity: 8,\n        is_active: true,\n      },\n      {\n        name: 'Audit√≥rio',\n        location: 'Andar T√©rreo',\n        capacity: 50,\n        is_active: true,\n      },\n      {\n        name: 'Sala de Brainstorm',\n        location: 'Andar 2 - Sala 205',\n        capacity: 6,\n        is_active: true,\n      }\n    ]).onConflictDoNothing();\n\n    console.log('‚úÖ Dados inseridos com sucesso!');\n    console.log('');\n    console.log('üë§ Usu√°rios criados:');\n    console.log('   Admin: miriam / admin123 (mzocche@pindo.com.py)');\n    console.log('   Admin: lucas / admin123 (lucassouza@pindo.com.py)');\n    console.log('   User:  usuario / user123 (usuario@empresa.com)');\n    console.log('');\n    console.log('üè¢ 4 salas de reuni√£o criadas');\n\n  } catch (error) {\n    console.error('‚ùå Erro ao inserir dados:', error);\n    throw error;\n  }\n};\n\nconst setup = async () => {\n  try {\n    createTables();\n    await seedData();\n    console.log('üéâ Setup do SQLite conclu√≠do!');\n    process.exit(0);\n  } catch (error) {\n    console.error('‚ùå Erro durante o setup:', error);\n    process.exit(1);\n  }\n};\n\nsetup();","size_bytes":4392},"scripts/simple-seed.ts":{"content":"#!/usr/bin/env tsx\n\nimport Database from 'better-sqlite3';\nimport { drizzle } from 'drizzle-orm/better-sqlite3';\nimport { hashPassword } from '../server/auth';\nimport { nanoid } from 'nanoid';\n\nconsole.log('üóÉÔ∏è  Configurando banco SQLite simples...');\n\n// Initialize SQLite database\nconst sqlite = new Database('./database.sqlite');\nsqlite.pragma('journal_mode = WAL');\n\n// Create tables using SQL directly for SQLite (without UUIDs)\nconst createTables = () => {\n  console.log('üî® Criando tabelas...');\n  \n  // Users table\n  sqlite.exec(`\n    CREATE TABLE IF NOT EXISTS users (\n      id TEXT PRIMARY KEY,\n      username TEXT UNIQUE NOT NULL,\n      full_name TEXT NOT NULL,\n      email TEXT UNIQUE NOT NULL,\n      position TEXT,\n      password TEXT NOT NULL,\n      is_admin INTEGER DEFAULT 0,\n      created_at TEXT DEFAULT CURRENT_TIMESTAMP\n    );\n  `);\n\n  // Rooms table\n  sqlite.exec(`\n    CREATE TABLE IF NOT EXISTS rooms (\n      id TEXT PRIMARY KEY,\n      name TEXT NOT NULL,\n      location TEXT NOT NULL,\n      capacity INTEGER NOT NULL,\n      is_active INTEGER DEFAULT 1,\n      created_at TEXT DEFAULT CURRENT_TIMESTAMP\n    );\n  `);\n\n  // Bookings table\n  sqlite.exec(`\n    CREATE TABLE IF NOT EXISTS bookings (\n      id TEXT PRIMARY KEY,\n      title TEXT NOT NULL,\n      description TEXT,\n      date TEXT NOT NULL,\n      start_time TEXT NOT NULL,\n      end_time TEXT NOT NULL,\n      status TEXT DEFAULT 'confirmed',\n      user_id TEXT REFERENCES users(id) ON DELETE CASCADE,\n      room_id TEXT REFERENCES rooms(id) ON DELETE CASCADE,\n      created_at TEXT DEFAULT CURRENT_TIMESTAMP\n    );\n  `);\n  \n  console.log('‚úÖ Tabelas criadas');\n};\n\nconst seedData = async () => {\n  console.log('üå± Inserindo dados iniciais...');\n  \n  try {\n    // Create admin users\n    console.log('üë• Criando usu√°rios administradores...');\n    \n    const admin1Password = await hashPassword('admin123');\n    const admin2Password = await hashPassword('admin123');\n    const userPassword = await hashPassword('user123');\n    \n    // Insert users manually\n    sqlite.prepare(`\n      INSERT OR IGNORE INTO users (id, username, full_name, email, position, password, is_admin)\n      VALUES (?, ?, ?, ?, ?, ?, ?)\n    `).run(nanoid(), 'miriam', 'Miriam Zocche', 'mzocche@pindo.com.py', 'Gerente', admin1Password, 1);\n    \n    sqlite.prepare(`\n      INSERT OR IGNORE INTO users (id, username, full_name, email, position, password, is_admin)\n      VALUES (?, ?, ?, ?, ?, ?, ?)\n    `).run(nanoid(), 'lucas', 'Lucas Souza', 'lucassouza@pindo.com.py', 'Coordenador', admin2Password, 1);\n    \n    sqlite.prepare(`\n      INSERT OR IGNORE INTO users (id, username, full_name, email, position, password, is_admin)\n      VALUES (?, ?, ?, ?, ?, ?, ?)\n    `).run(nanoid(), 'usuario', 'Usu√°rio Teste', 'usuario@empresa.com', 'Funcion√°rio', userPassword, 0);\n\n    console.log('üè¢ Criando salas...');\n    \n    sqlite.prepare(`\n      INSERT OR IGNORE INTO rooms (id, name, location, capacity, is_active)\n      VALUES (?, ?, ?, ?, ?)\n    `).run(nanoid(), 'Sala de Reuni√£o Principal', 'Andar 2 - Sala 201', 12, 1);\n    \n    sqlite.prepare(`\n      INSERT OR IGNORE INTO rooms (id, name, location, capacity, is_active)\n      VALUES (?, ?, ?, ?, ?)\n    `).run(nanoid(), 'Sala de Videoconfer√™ncia', 'Andar 3 - Sala 301', 8, 1);\n    \n    sqlite.prepare(`\n      INSERT OR IGNORE INTO rooms (id, name, location, capacity, is_active)\n      VALUES (?, ?, ?, ?, ?)\n    `).run(nanoid(), 'Audit√≥rio', 'Andar T√©rreo', 50, 1);\n    \n    sqlite.prepare(`\n      INSERT OR IGNORE INTO rooms (id, name, location, capacity, is_active)\n      VALUES (?, ?, ?, ?, ?)\n    `).run(nanoid(), 'Sala de Brainstorm', 'Andar 2 - Sala 205', 6, 1);\n\n    console.log('‚úÖ Dados inseridos com sucesso!');\n    console.log('');\n    console.log('üë§ Usu√°rios criados:');\n    console.log('   Admin: miriam / admin123 (mzocche@pindo.com.py)');\n    console.log('   Admin: lucas / admin123 (lucassouza@pindo.com.py)');\n    console.log('   User:  usuario / user123 (usuario@empresa.com)');\n    console.log('');\n    console.log('üè¢ 4 salas de reuni√£o criadas');\n\n  } catch (error) {\n    console.error('‚ùå Erro ao inserir dados:', error);\n    throw error;\n  }\n};\n\nconst setup = async () => {\n  try {\n    createTables();\n    await seedData();\n    console.log('üéâ Setup do SQLite conclu√≠do!');\n    sqlite.close();\n    process.exit(0);\n  } catch (error) {\n    console.error('‚ùå Erro durante o setup:', error);\n    sqlite.close();\n    process.exit(1);\n  }\n};\n\nsetup();","size_bytes":4504},"scripts/start-local.js":{"content":"\nimport { spawn } from 'child_process';\nimport { fileURLToPath } from 'url';\nimport { dirname, join } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nconst projectRoot = join(__dirname, '..');\n\nconsole.log('üöÄ Iniciando servidor local...');\n\n// Set environment variables for local development\nprocess.env.NODE_ENV = 'development';\nprocess.env.PORT = process.env.PORT || '3000';\n\n// Start the server\nconst server = spawn('npm', ['run', 'dev'], {\n  cwd: projectRoot,\n  stdio: 'inherit',\n  shell: true\n});\n\nserver.on('close', (code) => {\n  console.log(`Servidor encerrado com c√≥digo ${code}`);\n});\n\nserver.on('error', (error) => {\n  console.error('Erro ao iniciar servidor:', error);\n});\n\nprocess.on('SIGINT', () => {\n  console.log('\\nüõë Encerrando servidor...');\n  server.kill();\n  process.exit(0);\n});\n","size_bytes":862},"scripts/test-connection.ts":{"content":"import { pool } from '../server/db.js';\n\nasync function testConnection() {\n  console.log('üîó Testando conex√£o com o banco de dados...');\n  console.log('DATABASE_URL configurada:', process.env.DATABASE_URL ? 'Sim ‚úì' : 'N√£o ‚úó');\n  \n  if (process.env.DATABASE_URL) {\n    const url = new URL(process.env.DATABASE_URL);\n    console.log('Host:', url.hostname);\n    console.log('Porta:', url.port);\n    console.log('Banco:', url.pathname);\n  }\n\n  try {\n    const client = await pool.connect();\n    console.log('‚úÖ Conex√£o com o banco de dados bem-sucedida!');\n    \n    const result = await client.query('SELECT NOW() as current_time');\n    console.log('‚è∞ Hora do servidor:', result.rows[0].current_time);\n    \n    client.release();\n  } catch (error) {\n    console.error('‚ùå Erro na conex√£o:', error);\n  } finally {\n    await pool.end();\n    process.exit(0);\n  }\n}\n\ntestConnection();","size_bytes":889},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nexport async function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET!,\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n    cookie: {\n      secure: process.env.NODE_ENV === 'production',\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    }\n  };\n\n  // Only set trust proxy in production/Replit environment\n  if (process.env.REPLIT_ENV || process.env.NODE_ENV === 'production') {\n    app.set(\"trust proxy\", 1);\n  }\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      try {\n        // Try to find user by username first, then by email\n        let user = await storage.getUserByUsername(username);\n        if (!user) {\n          user = await storage.getUserByEmail(username);\n        }\n        \n        if (!user) {\n          return done(null, false, { message: \"Usu√°rio n√£o encontrado\" });\n        }\n        \n        const isValidPassword = await comparePasswords(password, user.password);\n        \n        if (!isValidPassword) {\n          return done(null, false, { message: \"Senha incorreta\" });\n        }\n        \n        return done(null, user);\n      } catch (error) {\n        console.error(\"Login error:\", error);\n        return done(error);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const existingUserByUsername = await storage.getUserByUsername(req.body.username);\n      if (existingUserByUsername) {\n        return res.status(400).json({ message: \"Nome de usu√°rio j√° existe\" });\n      }\n\n      const existingUserByEmail = await storage.getUserByEmail(req.body.email);\n      if (existingUserByEmail) {\n        return res.status(400).json({ message: \"E-mail j√° est√° em uso\" });\n      }\n\n      const user = await storage.createUser({\n        ...req.body,\n        password: await hashPassword(req.body.password),\n      });\n\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(201).json(user);\n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Erro interno do servidor\" });\n    }\n  });\n\n  app.post(\"/api/login\", (req, res, next) => {\n    passport.authenticate(\"local\", (err: any, user: any, info: any) => {\n      if (err) {\n        return res.status(500).json({ message: \"Erro interno do servidor\" });\n      }\n      if (!user) {\n        return res.status(401).json({ message: info?.message || \"Credenciais inv√°lidas\" });\n      }\n      req.login(user, (err: any) => {\n        if (err) {\n          return res.status(500).json({ message: \"Erro interno do servidor\" });\n        }\n        res.status(200).json(user);\n      });\n    })(req, res, next);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    res.json(req.user);\n  });\n\n  // Password recovery endpoint\n  app.post(\"/api/forgot-password\", async (req, res) => {\n    try {\n      const { email } = req.body;\n      const user = await storage.getUserByEmail(email);\n      \n      if (!user) {\n        // Don't reveal if email exists or not for security\n        return res.status(200).json({ \n          message: \"Se este e-mail estiver cadastrado, voc√™ receber√° instru√ß√µes para redefinir sua senha.\" \n        });\n      }\n\n      console.log(`Password recovery requested for user: ${user.email}`);\n      \n      res.status(200).json({ \n        message: \"Se este e-mail estiver cadastrado, voc√™ receber√° instru√ß√µes para redefinir sua senha.\" \n      });\n    } catch (error) {\n      console.error(\"Password recovery error:\", error);\n      res.status(500).json({ message: \"Erro interno do servidor\" });\n    }\n  });\n\n\n}\n","size_bytes":5229},"server/db-local.ts":{"content":"\nimport { drizzle } from \"drizzle-orm/node-postgres\";\nimport { Pool } from \"pg\";\nimport * as schema from \"@shared/schema\";\n\n// Local PostgreSQL configuration\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL || 'postgres://localhost:5432/room_booking',\n  max: 20,\n  idleTimeoutMillis: 30000,\n  connectionTimeoutMillis: 2000,\n});\n\nexport const db = drizzle(pool, { schema });\n\n// Test database connection\npool.on('connect', () => {\n  console.log('üóÑÔ∏è  Conectado ao banco PostgreSQL local');\n});\n\npool.on('error', (err) => {\n  console.error('‚ùå Erro na conex√£o com banco:', err);\n});\n","size_bytes":607},"server/db-sqlite.ts":{"content":"import Database from 'better-sqlite3';\nimport { drizzle } from 'drizzle-orm/better-sqlite3';\nimport * as schema from \"@shared/schema\";\nimport { migrate } from 'drizzle-orm/better-sqlite3/migrator';\n\n// Create SQLite database\nconst sqlite = new Database('./database.sqlite');\nsqlite.pragma('journal_mode = WAL');\n\nexport const db = drizzle(sqlite, { schema });\n\n// Run migrations automatically\ntry {\n  migrate(db, { migrationsFolder: './migrations' });\n  console.log('‚úÖ SQLite migrations completed');\n} catch (error) {\n  console.log('‚ÑπÔ∏è  No migrations to run or already completed');\n}\n\nexport { sqlite };","size_bytes":609},"server/db.ts":{"content":"import Database from 'better-sqlite3';\nimport { drizzle } from 'drizzle-orm/better-sqlite3';\nimport * as schema from \"@shared/schema\";\n\nconsole.log('üîß Database URL configured');\n\n// Always use SQLite\nconst sqlite = new Database('./database.sqlite');\nsqlite.pragma('journal_mode = WAL');\n\nexport const db = drizzle(sqlite, { schema });\n\nconsole.log('üóÉÔ∏è  Using SQLite database');\nconsole.log('‚úÖ SQLite database initialized');","size_bytes":433},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // Serve the app on the specified port\n  // Default to 3000 for local development, 5000 for Replit\n  const port = parseInt(process.env.PORT || (process.env.REPLIT_ENV ? '5000' : '3000'), 10);\n  const host = process.env.REPLIT_ENV ? \"0.0.0.0\" : \"localhost\";\n  \n  server.listen({\n    port,\n    host,\n    reusePort: process.env.REPLIT_ENV ? true : false,\n  }, () => {\n    log(`üåê Servidor rodando em http://${host}:${port}`);\n    if (!process.env.REPLIT_ENV) {\n      log(`üì± Interface dispon√≠vel em: http://${host}:${port}`);\n      log(`üîß API dispon√≠vel em: http://${host}:${port}/api`);\n    }\n  });\n})();\n","size_bytes":2249},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { setupAuth, hashPassword } from \"./auth\";\nimport { storage } from \"./storage\";\nimport { insertRoomSchema, insertBookingSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\n// Store WebSocket connections by user ID\nconst kitchenConnections = new Map<string, WebSocket[]>();\n\n// Helper function to send notifications to kitchen users\nexport function notifyKitchenUsers(kitchenUserId: string, data: any) {\n  const userConnections = kitchenConnections.get(kitchenUserId);\n  if (userConnections) {\n    userConnections.forEach(ws => {\n      if (ws.readyState === WebSocket.OPEN) {\n        ws.send(JSON.stringify(data));\n      }\n    });\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication routes\n  setupAuth(app);\n\n  // User management routes (admin only)\n  app.get(\"/api/users\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.patch(\"/api/users/:id/admin\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const { isAdmin } = req.body;\n      const success = await storage.updateUserAdminStatus(req.params.id, isAdmin);\n      if (!success) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json({ message: \"User admin status updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating user admin status:\", error);\n      res.status(500).json({ message: \"Failed to update user admin status\" });\n    }\n  });\n\n  app.patch(\"/api/users/:id/kitchen\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const { isKitchen } = req.body;\n      const success = await storage.updateUserKitchenStatus(req.params.id, isKitchen);\n      if (!success) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json({ message: \"User kitchen status updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating user kitchen status:\", error);\n      res.status(500).json({ message: \"Failed to update user kitchen status\" });\n    }\n  });\n\n  app.put(\"/api/users/:id/password\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const { password } = req.body;\n      \n      if (!password || password.length < 6) {\n        return res.status(400).json({ message: \"Password must be at least 6 characters long\" });\n      }\n\n      const hashedPassword = await hashPassword(password);\n      const success = await storage.updateUserPassword(req.params.id, hashedPassword);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json({ message: \"User password updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating user password:\", error);\n      res.status(500).json({ message: \"Failed to update user password\" });\n    }\n  });\n\n  app.patch(\"/api/users/:id/kitchen\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const { isKitchen } = req.body;\n      const success = await storage.updateUserKitchenStatus(req.params.id, isKitchen);\n      if (!success) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json({ message: \"User kitchen status updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating user kitchen status:\", error);\n      res.status(500).json({ message: \"Failed to update user kitchen status\" });\n    }\n  });\n\n  // Room routes\n  app.get(\"/api/rooms\", async (req, res) => {\n    try {\n      const rooms = await storage.getRooms();\n      res.json(rooms);\n    } catch (error) {\n      console.error(\"Error fetching rooms:\", error);\n      res.status(500).json({ message: \"Failed to fetch rooms\" });\n    }\n  });\n\n  app.post(\"/api/rooms\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const roomData = insertRoomSchema.parse(req.body);\n      const room = await storage.createRoom(roomData);\n      res.status(201).json(room);\n    } catch (error) {\n      console.error(\"Error creating room:\", error);\n      res.status(400).json({ message: \"Invalid room data\" });\n    }\n  });\n\n  app.patch(\"/api/rooms/:id\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const roomData = insertRoomSchema.partial().parse(req.body);\n      const room = await storage.updateRoom(req.params.id, roomData);\n      if (!room) {\n        return res.status(404).json({ message: \"Room not found\" });\n      }\n      res.json(room);\n    } catch (error) {\n      console.error(\"Error updating room:\", error);\n      res.status(400).json({ message: \"Invalid room data\" });\n    }\n  });\n\n  app.delete(\"/api/rooms/:id\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const success = await storage.deleteRoom(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Room not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting room:\", error);\n      res.status(500).json({ message: \"Failed to delete room\" });\n    }\n  });\n\n  // Booking routes\n  app.get(\"/api/bookings\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n\n    try {\n      // Return only user's own bookings for regular users\n      const bookings = await storage.getBookingsByUser(req.user.id);\n      res.json(bookings);\n    } catch (error) {\n      console.error(\"Error fetching bookings:\", error);\n      res.status(500).json({ message: \"Failed to fetch bookings\" });\n    }\n  });\n\n  // Get all bookings (for dashboard)\n  app.get(\"/api/bookings/all\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n\n    try {\n      const bookings = await storage.getBookings();\n      res.json(bookings);\n    } catch (error) {\n      console.error(\"Error fetching all bookings:\", error);\n      res.status(500).json({ message: \"Failed to fetch bookings\" });\n    }\n  });\n\n  app.post(\"/api/bookings\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n\n    try {\n      const bookingData = insertBookingSchema.parse(req.body);\n      \n      // Check for conflicts\n      const hasConflict = await storage.checkBookingConflict(\n        bookingData.roomId,\n        bookingData.date,\n        bookingData.startTime,\n        bookingData.endTime\n      );\n\n      if (hasConflict) {\n        return res.status(409).json({ message: \"Room is already booked for this time slot\" });\n      }\n\n      // Validate time range\n      if (bookingData.startTime >= bookingData.endTime) {\n        return res.status(400).json({ message: \"End time must be after start time\" });\n      }\n\n      const booking = await storage.createBooking({\n        ...bookingData,\n        userId: req.user!.id,\n      });\n      \n      // Create kitchen order if cafe service was requested\n      if (bookingData.cafeRequested && bookingData.peopleCount) {\n        try {\n          // Get room details to check for assigned kitchen user\n          const room = await storage.getRoom(bookingData.roomId);\n          \n          if (!room?.assignedKitchenUserId) {\n            console.log(\"‚ö†Ô∏è  No kitchen user assigned to room:\", room?.name || bookingData.roomId);\n            // Don't create kitchen order if no kitchen user is assigned to this room\n          } else {\n            const kitchenOrder = await storage.createKitchenOrder({\n              bookingId: booking.id,\n              roomId: bookingData.roomId,\n              userId: room.assignedKitchenUserId, // Use the assigned kitchen user instead of booking user\n              peopleCount: bookingData.peopleCount,\n              requestedMeals: bookingData.requestedMeals || \"\",\n              requestedDrinks: bookingData.requestedDrinks || \"\",\n              orderDate: bookingData.date,\n              orderTime: bookingData.startTime,\n            });\n            \n            // Send real-time notification to kitchen user\n            notifyKitchenUsers(room.assignedKitchenUserId, {\n              type: 'NEW_KITCHEN_ORDER',\n              order: kitchenOrder,\n              booking: {\n                title: booking.title,\n                date: bookingData.date,\n                startTime: bookingData.startTime,\n                endTime: bookingData.endTime,\n                room: room.name\n              },\n              message: `Nuevo pedido de caf√© para ${room.name}`\n            });\n            \n            console.log(\"üìß Kitchen order created for assigned user:\", room.assignedKitchenUserId, \"for booking:\", booking.id);\n            console.log(\"üîî Real-time notification sent to kitchen user:\", room.assignedKitchenUserId);\n          }\n        } catch (kitchenError) {\n          console.error(\"‚ö†Ô∏è  Failed to create kitchen order:\", kitchenError);\n          // Don't fail the booking if kitchen order creation fails\n        }\n      }\n      \n      res.status(201).json(booking);\n    } catch (error) {\n      console.error(\"Error creating booking:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid booking data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create booking\" });\n      }\n    }\n  });\n\n  app.patch(\"/api/bookings/:id\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n\n    try {\n      const existingBooking = await storage.getBooking(req.params.id);\n      if (!existingBooking) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n\n      // Check if user owns booking or is admin\n      if (existingBooking.userId !== req.user!.id && !req.user?.isAdmin) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const bookingData = insertBookingSchema.partial().parse(req.body);\n      \n      // If updating time/date/room, check for conflicts\n      if (bookingData.roomId || bookingData.date || bookingData.startTime || bookingData.endTime) {\n        const roomId = bookingData.roomId || existingBooking.roomId;\n        const date = bookingData.date || existingBooking.date;\n        const startTime = bookingData.startTime || existingBooking.startTime;\n        const endTime = bookingData.endTime || existingBooking.endTime;\n\n        if (startTime >= endTime) {\n          return res.status(400).json({ message: \"End time must be after start time\" });\n        }\n\n        const hasConflict = await storage.checkBookingConflict(\n          roomId,\n          date,\n          startTime,\n          endTime,\n          req.params.id\n        );\n\n        if (hasConflict) {\n          return res.status(409).json({ message: \"Room is already booked for this time slot\" });\n        }\n      }\n\n      const booking = await storage.updateBooking(req.params.id, bookingData);\n      res.json(booking);\n    } catch (error) {\n      console.error(\"Error updating booking:\", error);\n      res.status(400).json({ message: \"Invalid booking data\" });\n    }\n  });\n\n  app.delete(\"/api/bookings/:id\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n\n    try {\n      const existingBooking = await storage.getBooking(req.params.id);\n      if (!existingBooking) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n\n      // Check if user owns booking or is admin\n      if (existingBooking.userId !== req.user!.id && !req.user?.isAdmin) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const success = await storage.deleteBooking(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting booking:\", error);\n      res.status(500).json({ message: \"Failed to delete booking\" });\n    }\n  });\n\n  // Dashboard stats - Available to all authenticated users\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/room-stats\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n\n    if (!req.user?.isAdmin) {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    try {\n      const roomStats = await storage.getRoomStats();\n      res.json(roomStats);\n    } catch (error) {\n      console.error(\"Error fetching room stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch room stats\" });\n    }\n  });\n\n  // Kitchen order routes\n  app.get(\"/api/kitchen/orders\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isKitchen) {\n      return res.status(403).json({ message: \"Kitchen access required\" });\n    }\n\n    try {\n      // Get orders only for rooms where this user is assigned as kitchen responsible\n      const orders = await storage.getKitchenOrdersByUser(req.user!.id);\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Error fetching kitchen orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch kitchen orders\" });\n    }\n  });\n\n  app.get(\"/api/kitchen/orders/room/:roomId\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isKitchen) {\n      return res.status(403).json({ message: \"Kitchen access required\" });\n    }\n\n    try {\n      const orders = await storage.getKitchenOrdersByRoom(req.params.roomId);\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Error fetching kitchen orders for room:\", error);\n      res.status(500).json({ message: \"Failed to fetch kitchen orders\" });\n    }\n  });\n\n  app.post(\"/api/kitchen/orders\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n\n    try {\n      // This will be called automatically when a booking with cafe service is created\n      const orderData = {\n        ...req.body,\n        userId: req.user!.id,\n      };\n      const order = await storage.createKitchenOrder(orderData);\n      res.status(201).json(order);\n    } catch (error) {\n      console.error(\"Error creating kitchen order:\", error);\n      res.status(500).json({ message: \"Failed to create kitchen order\" });\n    }\n  });\n\n  app.patch(\"/api/kitchen/orders/:id/complete\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isKitchen) {\n      return res.status(403).json({ message: \"Kitchen access required\" });\n    }\n\n    try {\n      const order = await storage.updateKitchenOrderStatus(req.params.id, 'completed', req.user!.id);\n      if (!order) {\n        return res.status(404).json({ message: \"Kitchen order not found\" });\n      }\n      res.json(order);\n    } catch (error) {\n      console.error(\"Error completing kitchen order:\", error);\n      res.status(500).json({ message: \"Failed to complete kitchen order\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  // Setup WebSocket server for real-time notifications\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  \n  wss.on('connection', (ws, req) => {\n    console.log('üì° WebSocket connection established');\n    \n    ws.on('message', (message) => {\n      try {\n        const data = JSON.parse(message.toString());\n        \n        if (data.type === 'KITCHEN_USER_CONNECT' && data.userId) {\n          // Store this connection for the kitchen user\n          if (!kitchenConnections.has(data.userId)) {\n            kitchenConnections.set(data.userId, []);\n          }\n          kitchenConnections.get(data.userId)!.push(ws);\n          \n          console.log(`üçΩÔ∏è Kitchen user ${data.userId} connected to WebSocket`);\n          \n          // Send confirmation\n          ws.send(JSON.stringify({\n            type: 'CONNECTION_CONFIRMED',\n            message: 'Connected to kitchen notifications'\n          }));\n        }\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    });\n    \n    ws.on('close', () => {\n      // Remove this connection from all kitchen user connections\n      for (const [userId, connections] of Array.from(kitchenConnections.entries())) {\n        const index = connections.indexOf(ws);\n        if (index !== -1) {\n          connections.splice(index, 1);\n          if (connections.length === 0) {\n            kitchenConnections.delete(userId);\n          }\n          console.log(`üîå Kitchen user ${userId} disconnected from WebSocket`);\n          break;\n        }\n      }\n    });\n    \n    ws.on('error', (error) => {\n      console.error('WebSocket error:', error);\n    });\n  });\n  \n  return httpServer;\n}\n","size_bytes":18358},"server/storage.ts":{"content":"import { users, rooms, bookings, kitchenOrders, type User, type InsertUser, type Room, type InsertRoom, type Booking, type InsertBooking, type BookingWithDetails, type KitchenOrder, type InsertKitchenOrder, type KitchenOrderWithDetails } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, ne, and, desc, count, sql } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport MemoryStore from \"memorystore\";\nimport { nanoid } from \"nanoid\";\n\n// Use MemoryStore for sessions with SQLite\nconst MemorySessionStore = MemoryStore(session);\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUserPassword(id: string, hashedPassword: string): Promise<boolean>;\n  getAllUsers(): Promise<User[]>;\n  updateUserAdminStatus(id: string, isAdmin: boolean): Promise<boolean>;\n  updateUserKitchenStatus(id: string, isKitchen: boolean): Promise<boolean>;\n  \n  getRooms(): Promise<Room[]>;\n  getRoom(id: string): Promise<Room | undefined>;\n  createRoom(room: InsertRoom): Promise<Room>;\n  updateRoom(id: string, room: Partial<InsertRoom>): Promise<Room | undefined>;\n  deleteRoom(id: string): Promise<boolean>;\n  \n  getBookings(): Promise<BookingWithDetails[]>;\n  getBookingsByUser(userId: string): Promise<BookingWithDetails[]>;\n  getBooking(id: string): Promise<BookingWithDetails | undefined>;\n  createBooking(booking: InsertBooking & { userId: string }): Promise<Booking>;\n  updateBooking(id: string, booking: Partial<InsertBooking>): Promise<Booking | undefined>;\n  deleteBooking(id: string): Promise<boolean>;\n  checkBookingConflict(roomId: string, date: string, startTime: string, endTime: string, excludeBookingId?: string): Promise<boolean>;\n  \n  getRoomStats(): Promise<{ roomId: string; roomName: string; bookingCount: number; location: string }[]>;\n  getDashboardStats(): Promise<{\n    todayBookings: number;\n    activeRooms: number;\n    occupancyRate: number;\n    activeUsers: number;\n  }>;\n\n  // Kitchen order methods\n  getKitchenOrders(): Promise<KitchenOrderWithDetails[]>;\n  getKitchenOrdersByRoom(roomId: string): Promise<KitchenOrderWithDetails[]>;\n  createKitchenOrder(order: InsertKitchenOrder): Promise<KitchenOrder>;\n  updateKitchenOrderStatus(id: string, status: 'pending' | 'completed', completedBy?: string): Promise<KitchenOrder | undefined>;\n\n  sessionStore: any;\n}\n\nexport class DatabaseStorage implements IStorage {\n  sessionStore: any;\n\n  constructor() {\n    this.sessionStore = new MemorySessionStore({\n      checkPeriod: 86400000 // 24h\n    });\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values({\n        ...insertUser,\n        id: nanoid()\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUserPassword(id: string, hashedPassword: string): Promise<boolean> {\n    try {\n      const result = await db\n        .update(users)\n        .set({ password: hashedPassword })\n        .where(eq(users.id, id))\n        .returning();\n      return result.length > 0;\n    } catch (error) {\n      console.error(\"Error updating user password:\", error);\n      return false;\n    }\n  }\n\n\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select({\n      id: users.id,\n      username: users.username,\n      fullName: users.fullName,\n      position: users.position,\n      email: users.email,\n      isAdmin: users.isAdmin,\n      isKitchen: users.isKitchen,\n      createdAt: users.createdAt,\n      password: sql`''`.mapWith(String).as('password') // Don't return password\n    }).from(users).orderBy(users.fullName);\n  }\n\n  async updateUserAdminStatus(id: string, isAdmin: boolean): Promise<boolean> {\n    const [updatedUser] = await db\n      .update(users)\n      .set({ isAdmin: isAdmin })\n      .where(eq(users.id, id))\n      .returning();\n    return !!updatedUser;\n  }\n\n  async updateUserKitchenStatus(id: string, isKitchen: boolean): Promise<boolean> {\n    try {\n      const result = await db\n        .update(users)\n        .set({ isKitchen: isKitchen })\n        .where(eq(users.id, id))\n        .returning();\n      \n      return result.length > 0;\n    } catch (error) {\n      console.error(\"Error updating user kitchen status:\", error);\n      return false;\n    }\n  }\n\n  // Room methods\n  async getRooms(): Promise<Room[]> {\n    return await db.select().from(rooms).where(eq(rooms.isActive, true)).orderBy(rooms.name);\n  }\n\n  async getRoom(id: string): Promise<Room | undefined> {\n    const [room] = await db.select().from(rooms).where(eq(rooms.id, id));\n    return room || undefined;\n  }\n\n  async createRoom(room: InsertRoom): Promise<Room> {\n    const [newRoom] = await db\n      .insert(rooms)\n      .values({\n        ...room,\n        id: nanoid()\n      })\n      .returning();\n    return newRoom;\n  }\n\n  async updateRoom(id: string, room: Partial<InsertRoom>): Promise<Room | undefined> {\n    try {\n      // Handle assignedKitchenUserId validation\n      if (room.assignedKitchenUserId !== undefined) {\n        if (room.assignedKitchenUserId === null || room.assignedKitchenUserId === \"\" || room.assignedKitchenUserId === \"none\") {\n          // Set to null for \"no assignment\"\n          room.assignedKitchenUserId = null;\n        } else {\n          // Validate that the user exists and is a kitchen user\n          const kitchenUser = await db\n            .select()\n            .from(users)\n            .where(eq(users.id, room.assignedKitchenUserId))\n            .limit(1);\n          \n          if (kitchenUser.length === 0) {\n            throw new Error(`User with ID ${room.assignedKitchenUserId} not found`);\n          }\n          \n          if (!kitchenUser[0].isKitchen) {\n            throw new Error(`User ${kitchenUser[0].fullName} is not a kitchen user`);\n          }\n        }\n      }\n\n      const [updatedRoom] = await db\n        .update(rooms)\n        .set(room)\n        .where(eq(rooms.id, id))\n        .returning();\n      return updatedRoom || undefined;\n    } catch (error) {\n      console.error(\"Error updating room:\", error);\n      throw error;\n    }\n  }\n\n  async deleteRoom(id: string): Promise<boolean> {\n    const [deletedRoom] = await db\n      .update(rooms)\n      .set({ isActive: false })\n      .where(eq(rooms.id, id))\n      .returning();\n    return !!deletedRoom;\n  }\n\n  // Booking methods\n  async getBookings(): Promise<BookingWithDetails[]> {\n    return await db\n      .select()\n      .from(bookings)\n      .leftJoin(users, eq(bookings.userId, users.id))\n      .leftJoin(rooms, eq(bookings.roomId, rooms.id))\n      .orderBy(desc(bookings.date), desc(bookings.startTime))\n      .then(results => \n        results.map(result => ({\n          ...result.bookings,\n          user: result.users!,\n          room: result.rooms!,\n        }))\n      );\n  }\n\n  async getBookingsByUser(userId: string): Promise<BookingWithDetails[]> {\n    return await db\n      .select()\n      .from(bookings)\n      .leftJoin(users, eq(bookings.userId, users.id))\n      .leftJoin(rooms, eq(bookings.roomId, rooms.id))\n      .where(eq(bookings.userId, userId))\n      .orderBy(desc(bookings.date), desc(bookings.startTime))\n      .then(results => \n        results.map(result => ({\n          ...result.bookings,\n          user: result.users!,\n          room: result.rooms!,\n        }))\n      );\n  }\n\n  async getBooking(id: string): Promise<BookingWithDetails | undefined> {\n    const [result] = await db\n      .select()\n      .from(bookings)\n      .leftJoin(users, eq(bookings.userId, users.id))\n      .leftJoin(rooms, eq(bookings.roomId, rooms.id))\n      .where(eq(bookings.id, id));\n    \n    if (!result) return undefined;\n    \n    return {\n      ...result.bookings,\n      user: result.users!,\n      room: result.rooms!,\n    };\n  }\n\n  async createBooking(booking: InsertBooking & { userId: string }): Promise<Booking> {\n    const [newBooking] = await db\n      .insert(bookings)\n      .values({\n        ...booking,\n        id: nanoid()\n      })\n      .returning();\n    return newBooking;\n  }\n\n  async updateBooking(id: string, booking: Partial<InsertBooking>): Promise<Booking | undefined> {\n    const [updatedBooking] = await db\n      .update(bookings)\n      .set(booking)\n      .where(eq(bookings.id, id))\n      .returning();\n    return updatedBooking || undefined;\n  }\n\n  async deleteBooking(id: string): Promise<boolean> {\n    const [deletedBooking] = await db\n      .delete(bookings)\n      .where(eq(bookings.id, id))\n      .returning();\n    return !!deletedBooking;\n  }\n\n  async checkBookingConflict(roomId: string, date: string, startTime: string, endTime: string, excludeBookingId?: string): Promise<boolean> {\n    // Buscar todos os agendamentos confirmados para a mesma sala e data\n    const conditions = [\n      eq(bookings.roomId, roomId),\n      eq(bookings.date, date),\n      eq(bookings.status, \"confirmed\")\n    ];\n\n    // Se h√° um ID para excluir (edi√ß√£o), adicionar a condi√ß√£o\n    if (excludeBookingId) {\n      conditions.push(ne(bookings.id, excludeBookingId));\n    }\n\n    const existingBookings = await db\n      .select()\n      .from(bookings)\n      .where(and(...conditions));\n    \n    console.log(`üîç Verificando conflitos para sala ${roomId} em ${date} de ${startTime} √†s ${endTime}`);\n    console.log(`   Agendamentos existentes: ${existingBookings.length}`);\n    \n    // Verificar conflito manualmente para cada agendamento existente\n    for (const existing of existingBookings) {\n      const hasConflict = this.timeRangesOverlap(\n        startTime, endTime,\n        existing.startTime, existing.endTime\n      );\n      \n      if (hasConflict) {\n        console.log(`   ‚ùå CONFLITO encontrado com: \"${existing.title}\" (${existing.startTime}-${existing.endTime})`);\n        return true;\n      }\n    }\n    \n    console.log(`   ‚úÖ Sem conflitos encontrados`);\n    return false;\n  }\n\n  // Fun√ß√£o auxiliar para verificar se dois per√≠odos de tempo se sobrep√µem\n  private timeRangesOverlap(start1: string, end1: string, start2: string, end2: string): boolean {\n    // Converte strings de tempo para minutos desde meia-noite para compara√ß√£o mais f√°cil\n    const timeToMinutes = (time: string): number => {\n      const [hours, minutes] = time.split(':').map(Number);\n      return hours * 60 + minutes;\n    };\n    \n    const start1Min = timeToMinutes(start1);\n    const end1Min = timeToMinutes(end1);\n    const start2Min = timeToMinutes(start2);\n    const end2Min = timeToMinutes(end2);\n    \n    // Verifica se h√° sobreposi√ß√£o:\n    // Novo agendamento come√ßa antes do existente terminar E\n    // Novo agendamento termina depois do existente come√ßar\n    const overlaps = start1Min < end2Min && end1Min > start2Min;\n    \n    console.log(`     Comparando ${start1}-${end1} (${start1Min}-${end1Min}) com ${start2}-${end2} (${start2Min}-${end2Min}): ${overlaps ? 'CONFLITO' : 'OK'}`);\n    \n    return overlaps;\n  }\n\n  async getRoomStats(): Promise<{ roomId: string; roomName: string; bookingCount: number; location: string }[]> {\n    return await db\n      .select({\n        roomId: rooms.id,\n        roomName: rooms.name,\n        location: rooms.location,\n        bookingCount: count(bookings.id),\n      })\n      .from(rooms)\n      .leftJoin(bookings, eq(rooms.id, bookings.roomId))\n      .where(eq(rooms.isActive, true))\n      .groupBy(rooms.id, rooms.name, rooms.location)\n      .orderBy(desc(count(bookings.id)));\n  }\n\n  async getDashboardStats(): Promise<{\n    todayBookings: number;\n    activeRooms: number;\n    occupancyRate: number;\n    activeUsers: number;\n  }> {\n    const today = new Date().toISOString().split('T')[0];\n    \n    // Agendamentos confirmados para hoje\n    const [todayBookingsResult] = await db\n      .select({ count: count() })\n      .from(bookings)\n      .where(and(\n        eq(bookings.date, today),\n        eq(bookings.status, \"confirmed\")\n      ));\n\n    // Salas ativas\n    const [activeRoomsResult] = await db\n      .select({ count: count() })\n      .from(rooms)\n      .where(eq(rooms.isActive, true));\n\n    // Usu√°rios que fizeram pelo menos um agendamento (considerados ativos)\n    const [activeUsersResult] = await db\n      .select({ count: count(sql`DISTINCT ${bookings.userId}`) })\n      .from(bookings)\n      .where(eq(bookings.status, \"confirmed\"));\n\n    // Taxa de ocupa√ß√£o: tempo total reservado / tempo total dispon√≠vel de todas as salas\n    // Hor√°rio de funcionamento: 7:00 - 18:00 = 11 horas = 660 minutos por sala\n    const workingMinutesPerRoom = 660; // 11 horas * 60 minutos\n    const totalAvailableMinutes = activeRoomsResult.count * workingMinutesPerRoom;\n\n    // Calcular tempo total reservado hoje\n    const todayBookingsWithTime = await db\n      .select({\n        startTime: bookings.startTime,\n        endTime: bookings.endTime\n      })\n      .from(bookings)\n      .innerJoin(rooms, eq(bookings.roomId, rooms.id))\n      .where(and(\n        eq(bookings.date, today),\n        eq(bookings.status, \"confirmed\"),\n        eq(rooms.isActive, true)\n      ));\n\n    let totalReservedMinutes = 0;\n    for (const booking of todayBookingsWithTime) {\n      // Converter hor√°rios para minutos para facilitar o c√°lculo\n      const [startHour, startMin] = booking.startTime.split(':').map(Number);\n      const [endHour, endMin] = booking.endTime.split(':').map(Number);\n      const startMinutes = startHour * 60 + startMin;\n      const endMinutes = endHour * 60 + endMin;\n      \n      // Somar dura√ß√£o da reserva ao total\n      totalReservedMinutes += (endMinutes - startMinutes);\n    }\n\n    // Taxa de ocupa√ß√£o = (tempo reservado / tempo total dispon√≠vel) * 100\n    const occupancyRate = totalAvailableMinutes > 0 \n      ? Math.round((totalReservedMinutes / totalAvailableMinutes) * 100)\n      : 0;\n\n    return {\n      todayBookings: todayBookingsResult.count,\n      activeRooms: activeRoomsResult.count,\n      occupancyRate,\n      activeUsers: activeUsersResult.count,\n    };\n  }\n\n  // Kitchen order methods\n  async getKitchenOrders(): Promise<KitchenOrderWithDetails[]> {\n    return await db\n      .select()\n      .from(kitchenOrders)\n      .leftJoin(bookings, eq(kitchenOrders.bookingId, bookings.id))\n      .leftJoin(users, eq(kitchenOrders.userId, users.id))\n      .leftJoin(rooms, eq(kitchenOrders.roomId, rooms.id))\n      .orderBy(desc(kitchenOrders.createdAt))\n      .then(results =>\n        results.map(result => ({\n          ...result.kitchen_orders,\n          booking: result.bookings!,\n          user: result.users!,\n          room: result.rooms!,\n        }))\n      );\n  }\n\n  async getKitchenOrdersByRoom(roomId: string): Promise<KitchenOrderWithDetails[]> {\n    return await db\n      .select()\n      .from(kitchenOrders)\n      .leftJoin(bookings, eq(kitchenOrders.bookingId, bookings.id))\n      .leftJoin(users, eq(kitchenOrders.userId, users.id))\n      .leftJoin(rooms, eq(kitchenOrders.roomId, rooms.id))\n      .where(eq(kitchenOrders.roomId, roomId))\n      .orderBy(desc(kitchenOrders.createdAt))\n      .then(results =>\n        results.map(result => ({\n          ...result.kitchen_orders,\n          booking: result.bookings!,\n          user: result.users!,\n          room: result.rooms!,\n        }))\n      );\n  }\n\n  async getKitchenOrdersByUser(userId: string): Promise<KitchenOrderWithDetails[]> {\n    return await db\n      .select()\n      .from(kitchenOrders)\n      .leftJoin(bookings, eq(kitchenOrders.bookingId, bookings.id))\n      .leftJoin(users, eq(kitchenOrders.userId, users.id))\n      .leftJoin(rooms, eq(kitchenOrders.roomId, rooms.id))\n      .where(eq(kitchenOrders.userId, userId))\n      .orderBy(desc(kitchenOrders.createdAt))\n      .then(results =>\n        results.map(result => ({\n          ...result.kitchen_orders,\n          booking: result.bookings!,\n          user: result.users!,\n          room: result.rooms!,\n        }))\n      );\n  }\n\n  async createKitchenOrder(order: InsertKitchenOrder): Promise<KitchenOrder> {\n    const [newOrder] = await db\n      .insert(kitchenOrders)\n      .values({\n        ...order,\n        id: nanoid()\n      })\n      .returning();\n    return newOrder;\n  }\n\n  async updateKitchenOrderStatus(id: string, status: 'pending' | 'completed', completedBy?: string): Promise<KitchenOrder | undefined> {\n    const updateData: any = { status };\n    \n    if (status === 'completed') {\n      updateData.completedAt = new Date().toISOString();\n      if (completedBy) {\n        updateData.completedBy = completedBy;\n      }\n    }\n\n    const [updatedOrder] = await db\n      .update(kitchenOrders)\n      .set(updateData)\n      .where(eq(kitchenOrders.id, id))\n      .returning();\n    \n    return updatedOrder || undefined;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":17285},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { sqliteTable, text, integer } from \"drizzle-orm/sqlite-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = sqliteTable(\"users\", {\n  id: text(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  fullName: text(\"full_name\").notNull(),\n  position: text(\"position\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  isAdmin: integer(\"is_admin\", { mode: 'boolean' }).notNull().default(false),\n  isKitchen: integer(\"is_kitchen\", { mode: 'boolean' }).notNull().default(false), // Nuevo rol de cocina\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n});\n\nexport const rooms = sqliteTable(\"rooms\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  location: text(\"location\").notNull(),\n  capacity: integer(\"capacity\").notNull(),\n  isActive: integer(\"is_active\", { mode: 'boolean' }).notNull().default(true),\n  assignedKitchenUserId: text(\"assigned_kitchen_user_id\").references(() => users.id), // Usuario de cocina asignado para recibir notificaciones\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n});\n\nexport const bookings = sqliteTable(\"bookings\", {\n  id: text(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  responsavel: text(\"responsavel\"), // Campo opcional para respons√°vel pela reuni√£o\n  date: text(\"date\").notNull(), // Format: YYYY-MM-DD\n  startTime: text(\"start_time\").notNull(), // Format: HH:MM\n  endTime: text(\"end_time\").notNull(), // Format: HH:MM\n  userId: text(\"user_id\").notNull().references(() => users.id),\n  roomId: text(\"room_id\").notNull().references(() => rooms.id),\n  status: text(\"status\").notNull().default(\"confirmed\"), // confirmed, pending, cancelled\n  // Campos para servicio de caf√©\n  cafeRequested: integer(\"cafe_requested\", { mode: 'boolean' }).notNull().default(false),\n  peopleCount: integer(\"people_count\"),\n  requestedMeals: text(\"requested_meals\"),\n  requestedDrinks: text(\"requested_drinks\"),\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Nueva tabla para pedidos de cocina\nexport const kitchenOrders = sqliteTable(\"kitchen_orders\", {\n  id: text(\"id\").primaryKey(),\n  bookingId: text(\"booking_id\").notNull().references(() => bookings.id),\n  roomId: text(\"room_id\").notNull().references(() => rooms.id),\n  userId: text(\"user_id\").notNull().references(() => users.id),\n  peopleCount: integer(\"people_count\").notNull(),\n  requestedMeals: text(\"requested_meals\").notNull(),\n  requestedDrinks: text(\"requested_drinks\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, completed\n  orderDate: text(\"order_date\").notNull(),\n  orderTime: text(\"order_time\").notNull(),\n  completedAt: text(\"completed_at\"),\n  completedBy: text(\"completed_by\"), // ID del usuario de cocina que complet√≥ el pedido\n  createdAt: text(\"created_at\").notNull().default(sql`(datetime('now'))`),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  bookings: many(bookings),\n  kitchenOrders: many(kitchenOrders),\n}));\n\nexport const roomsRelations = relations(rooms, ({ many }) => ({\n  bookings: many(bookings),\n  kitchenOrders: many(kitchenOrders),\n}));\n\nexport const bookingsRelations = relations(bookings, ({ one, many }) => ({\n  user: one(users, {\n    fields: [bookings.userId],\n    references: [users.id],\n  }),\n  room: one(rooms, {\n    fields: [bookings.roomId],\n    references: [rooms.id],\n  }),\n  kitchenOrders: many(kitchenOrders),\n}));\n\nexport const kitchenOrdersRelations = relations(kitchenOrders, ({ one }) => ({\n  booking: one(bookings, {\n    fields: [kitchenOrders.bookingId],\n    references: [bookings.id],\n  }),\n  user: one(users, {\n    fields: [kitchenOrders.userId],\n    references: [users.id],\n  }),\n  room: one(rooms, {\n    fields: [kitchenOrders.roomId],\n    references: [rooms.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  fullName: true,\n  position: true,\n  email: true,\n});\n\nexport const insertRoomSchema = createInsertSchema(rooms).pick({\n  name: true,\n  location: true,\n  capacity: true,\n  assignedKitchenUserId: true,\n}).extend({\n  assignedKitchenUserId: z.string().optional(),\n});\n\nexport const insertBookingSchema = createInsertSchema(bookings).pick({\n  title: true,\n  description: true,\n  responsavel: true,\n  date: true,\n  startTime: true,\n  endTime: true,\n  roomId: true,\n  cafeRequested: true,\n  peopleCount: true,\n  requestedMeals: true,\n  requestedDrinks: true,\n});\n\nexport const insertKitchenOrderSchema = createInsertSchema(kitchenOrders).pick({\n  bookingId: true,\n  roomId: true,\n  userId: true,\n  peopleCount: true,\n  requestedMeals: true,\n  requestedDrinks: true,\n  orderDate: true,\n  orderTime: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertRoom = z.infer<typeof insertRoomSchema>;\nexport type Room = typeof rooms.$inferSelect;\nexport type InsertBooking = z.infer<typeof insertBookingSchema>;\nexport type Booking = typeof bookings.$inferSelect;\nexport type InsertKitchenOrder = z.infer<typeof insertKitchenOrderSchema>;\nexport type KitchenOrder = typeof kitchenOrders.$inferSelect;\n\n// Extended types with relations\nexport type BookingWithDetails = Booking & {\n  user: User;\n  room: Room;\n};\n\nexport type KitchenOrderWithDetails = KitchenOrder & {\n  booking: Booking;\n  user: User;\n  room: Room;\n};\n\n// Form validation schemas\nexport const roomFormSchema = insertRoomSchema.extend({\n  capacity: z.number().min(1, \"La capacidad debe ser al menos 1\").max(500, \"La capacidad no puede exceder 500 personas\"),\n});\n\nexport const editRoomFormSchema = roomFormSchema;\n\nexport const bookingFormSchema = insertBookingSchema.extend({\n  date: z.string().min(1, \"La fecha es obligatoria\"),\n  startTime: z.string().min(1, \"La hora de inicio es obligatoria\"),\n  endTime: z.string().min(1, \"La hora de fin es obligatoria\"),\n  title: z.string().min(1, \"El t√≠tulo es obligatorio\").max(100, \"T√≠tulo demasiado largo\"),\n  roomId: z.string().min(1, \"La sala es obligatoria\"),\n  responsavel: z.string().optional(), // Campo opcional\n  cafeRequested: z.boolean().default(false).optional(),\n  peopleCount: z.number().min(1, \"Debe indicar al menos 1 persona\").optional(),\n  requestedMeals: z.string().optional(),\n  requestedDrinks: z.string().optional(),\n});\n\nexport type RoomForm = z.infer<typeof roomFormSchema>;\nexport type EditRoomForm = z.infer<typeof editRoomFormSchema>;\nexport type BookingForm = z.infer<typeof bookingFormSchema>;\nexport type KitchenOrderForm = z.infer<typeof insertKitchenOrderSchema>;\n","size_bytes":6800},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { ProtectedRoute } from \"./lib/protected-route\";\nimport HomePage from \"@/pages/home-page\";\nimport AuthPage from \"@/pages/auth-page\";\nimport NotFound from \"@/pages/not-found\";\nimport KitchenPanel from \"@/pages/kitchen-panel\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <ProtectedRoute path=\"/\" component={HomePage} />\n      <ProtectedRoute path=\"/cocina\" component={KitchenPanel} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1084},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(263, 85%, 60%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  --success: hsl(142, 76%, 36%);\n  --warning: hsl(38, 92%, 50%);\n  --error: hsl(0, 84.2%, 60.2%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(263, 85%, 60%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n  --success: hsl(142, 76%, 36%);\n  --warning: hsl(38, 92%, 50%);\n  --error: hsl(0, 62.8%, 30.6%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .text-success {\n    color: var(--success);\n  }\n  \n  .text-warning {\n    color: var(--warning);\n  }\n  \n  .text-error {\n    color: var(--error);\n  }\n  \n  .bg-success {\n    background-color: var(--success);\n  }\n  \n  .bg-warning {\n    background-color: var(--warning);\n  }\n  \n  .bg-error {\n    background-color: var(--error);\n  }\n}\n","size_bytes":2226},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { insertUserSchema, User as SelectUser, InsertUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, InsertUser>;\n};\n\ntype LoginData = Pick<InsertUser, \"username\" | \"password\">;\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error de inicio de sesi√≥n\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: InsertUser) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error en el registro\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":2847},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-border\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return <Component />\n}\n","size_bytes":675},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/auth-page.tsx":{"content":"import React, { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { insertUserSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Calendar, Eye, EyeOff, Key, Loader2 } from \"lucide-react\";\n\nconst loginSchema = z.object({\n  username: z.string().min(1, \"Email o usuario es obligatorio\"),\n  password: z.string().min(1, \"La contrase√±a es obligatoria\"),\n});\n\nconst registerSchema = insertUserSchema.extend({\n  confirmPassword: z.string().min(1, \"Confirme su contrase√±a\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Las contrase√±as no coinciden\",\n  path: [\"confirmPassword\"],\n});\n\nconst recoverySchema = z.object({\n  email: z.string().email(\"Email inv√°lido\"),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\ntype RegisterForm = z.infer<typeof registerSchema>;\ntype RecoveryForm = z.infer<typeof recoverySchema>;\n\nexport default function AuthPage() {\n  const [, setLocation] = useLocation();\n  const { user, loginMutation, registerMutation } = useAuth();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [recoveryOpen, setRecoveryOpen] = useState(false);\n  const { toast } = useToast();\n\n  // Redirect if already logged in - use useEffect to avoid setState during render\n  React.useEffect(() => {\n    if (user) {\n      setLocation(\"/\");\n    }\n  }, [user, setLocation]);\n\n  const loginForm = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm<RegisterForm>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      fullName: \"\",\n      position: \"\",\n      email: \"\",\n    },\n  });\n\n  const recoveryForm = useForm<RecoveryForm>({\n    resolver: zodResolver(recoverySchema),\n    defaultValues: {\n      email: \"\",\n    },\n  });\n\n  const onLogin = async (data: LoginForm) => {\n    try {\n      await loginMutation.mutateAsync(data);\n      setLocation(\"/\");\n    } catch (error) {\n      // Error is handled by the mutation\n    }\n  };\n\n  const onRegister = async (data: RegisterForm) => {\n    try {\n      const { confirmPassword, ...registerData } = data;\n      await registerMutation.mutateAsync(registerData);\n      setLocation(\"/\");\n    } catch (error) {\n      // Error is handled by the mutation\n    }\n  };\n\n  const recoveryMutation = useMutation({\n    mutationFn: async (data: RecoveryForm) => {\n      const res = await apiRequest(\"POST\", \"/api/forgot-password\", data);\n      return await res.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Recuperaci√≥n enviada\",\n        description: data.message,\n      });\n      setRecoveryOpen(false);\n      recoveryForm.reset();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error en la recuperaci√≥n\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onRecovery = async (data: RecoveryForm) => {\n    await recoveryMutation.mutateAsync(data);\n  };\n\n  return (\n    <div className=\"min-h-screen flex\">\n      {/* Left side - Forms */}\n      <div className=\"flex-1 flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 p-8\">\n        <div className=\"w-full max-w-md\">\n          <div className=\"text-center mb-8\">\n            <div className=\"inline-flex items-center justify-center w-16 h-16 bg-primary rounded-full mb-4\">\n              <Calendar className=\"text-white h-8 w-8\" />\n            </div>\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Sistema de Reservas</h1>\n            <p className=\"text-gray-600\">Gestione sus reservas de salas</p>\n          </div>\n\n          <Card>\n            <CardContent className=\"p-0\">\n              <Tabs defaultValue=\"login\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-2\">\n                  <TabsTrigger value=\"login\">Ingresar</TabsTrigger>\n                  <TabsTrigger value=\"register\">Registrarse</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"login\" className=\"p-6\">\n                  <CardHeader className=\"p-0 mb-6\">\n                    <CardTitle>Iniciar Sesi√≥n</CardTitle>\n                    <CardDescription>\n                      Ingrese sus credenciales para acceder al sistema\n                    </CardDescription>\n                  </CardHeader>\n\n                  <Form {...loginForm}>\n                    <form onSubmit={loginForm.handleSubmit(onLogin)} className=\"space-y-4\">\n                      <FormField\n                        control={loginForm.control}\n                        name=\"username\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email o Usuario</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Ingrese su email o usuario\" \n                                {...field} \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={loginForm.control}\n                        name=\"password\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Contrase√±a</FormLabel>\n                            <FormControl>\n                              <div className=\"relative\">\n                                <Input \n                                  type={showPassword ? \"text\" : \"password\"}\n                                  placeholder=\"Ingrese su contrase√±a\" \n                                  {...field} \n                                />\n                                <Button\n                                  type=\"button\"\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                                  onClick={() => setShowPassword(!showPassword)}\n                                >\n                                  {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                                </Button>\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"flex items-center justify-between\">\n                        <div></div>\n                        <Dialog open={recoveryOpen} onOpenChange={setRecoveryOpen}>\n                          <DialogTrigger asChild>\n                            <Button variant=\"link\" className=\"px-0 text-primary\">Olvidaste tu contrase√±a? llame al 102</Button>\n                          </DialogTrigger>\n                          <DialogContent>\n                            <DialogHeader>\n                              <DialogTitle className=\"flex items-center gap-2\">\n                                <Key className=\"h-5 w-5 text-warning\" />\n                                Recuperar Contrase√±a\n                              </DialogTitle>\n                              <DialogDescription>\n                                Ingrese su email para recibir las instrucciones de recuperaci√≥n\n                              </DialogDescription>\n                            </DialogHeader>\n                            <Form {...recoveryForm}>\n                              <form onSubmit={recoveryForm.handleSubmit(onRecovery)} className=\"space-y-4\">\n                                <FormField\n                                  control={recoveryForm.control}\n                                  name=\"email\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>Email</FormLabel>\n                                      <FormControl>\n                                        <Input \n                                          type=\"email\"\n                                          placeholder=\"Ingrese su email\" \n                                          {...field} \n                                        />\n                                      </FormControl>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n                                <div className=\"flex gap-3\">\n                                  <Button \n                                    type=\"button\" \n                                    variant=\"outline\" \n                                    className=\"flex-1\"\n                                    onClick={() => setRecoveryOpen(false)}\n                                  >\n                                    Cancelar\n                                  </Button>\n                                  <Button \n                                    type=\"submit\" \n                                    className=\"flex-1 bg-warning hover:bg-yellow-600\"\n                                    disabled={recoveryMutation.isPending}\n                                  >\n                                    {recoveryMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                                    Enviar\n                                  </Button>\n                                </div>\n                              </form>\n                            </Form>\n                          </DialogContent>\n                        </Dialog>\n                      </div>\n\n                      <Button \n                        type=\"submit\" \n                        className=\"w-full\"\n                        disabled={loginMutation.isPending}\n                      >\n                        {loginMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                        Ingresar\n                      </Button>\n                    </form>\n                  </Form>\n                </TabsContent>\n\n                <TabsContent value=\"register\" className=\"p-6\">\n                  <CardHeader className=\"p-0 mb-6\">\n                    <CardTitle>Crear Cuenta</CardTitle>\n                    <CardDescription>\n                      Complete los datos para registrarse en el sistema\n                    </CardDescription>\n                  </CardHeader>\n\n                  <Form {...registerForm}>\n                    <form onSubmit={registerForm.handleSubmit(onRegister)} className=\"space-y-4\">\n                      <FormField\n                        control={registerForm.control}\n                        name=\"fullName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Nombre Completo *</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Ingrese su nombre completo\" \n                                {...field} \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={registerForm.control}\n                        name=\"position\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Funci√≥n (Cargo) *</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Ej: Gerente de Ventas\" \n                                {...field} \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={registerForm.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email *</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"email\"\n                                placeholder=\"Ingrese su email\" \n                                {...field} \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={registerForm.control}\n                        name=\"username\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Nombre de Usuario *</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Ingrese un nombre de usuario\" \n                                {...field} \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={registerForm.control}\n                        name=\"password\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Contrase√±a *</FormLabel>\n                            <FormControl>\n                              <div className=\"relative\">\n                                <Input \n                                  type={showPassword ? \"text\" : \"password\"}\n                                  placeholder=\"Ingrese una contrase√±a fuerte\" \n                                  {...field} \n                                />\n                                <Button\n                                  type=\"button\"\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                                  onClick={() => setShowPassword(!showPassword)}\n                                >\n                                  {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                                </Button>\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                            <p className=\"text-xs text-muted-foreground\">\n                              M√≠nimo 8 caracteres con letras y n√∫meros\n                            </p>\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={registerForm.control}\n                        name=\"confirmPassword\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Confirmar Contrase√±a *</FormLabel>\n                            <FormControl>\n                              <div className=\"relative\">\n                                <Input \n                                  type={showConfirmPassword ? \"text\" : \"password\"}\n                                  placeholder=\"Ingrese la contrase√±a nuevamente\" \n                                  {...field} \n                                />\n                                <Button\n                                  type=\"button\"\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                                >\n                                  {showConfirmPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                                </Button>\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <Button \n                        type=\"submit\" \n                        className=\"w-full bg-secondary hover:bg-indigo-700\"\n                        disabled={registerMutation.isPending}\n                      >\n                        {registerMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                        Crear Cuenta\n                      </Button>\n                    </form>\n                  </Form>\n                </TabsContent>\n              </Tabs>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":18143},"client/src/pages/home-page.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { insertBookingSchema, insertRoomSchema, type Room, type BookingWithDetails, type User, type KitchenOrderWithDetails } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\n\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  Calendar, \n  Clock, \n  DoorOpen, \n  Plus, \n  Users, \n  ChartPie, \n  CalendarDays,\n  Settings,\n  Edit,\n  Trash2,\n  AlertCircle,\n  LogOut,\n  User as UserIcon,\n  Key,\n  Coffee,\n  CheckCircle2,\n  Utensils,\n  Bell\n} from \"lucide-react\";\nimport { format, parseISO } from \"date-fns\";\nimport { es } from \"date-fns/locale\";\n\nconst bookingFormSchema = insertBookingSchema.extend({\n  date: z.string().min(1, \"La fecha es obligatoria\"),\n  startTime: z.string().min(1, \"La hora de inicio es obligatoria\"),\n  endTime: z.string().min(1, \"La hora de fin es obligatoria\"),\n});\n\nconst roomFormSchema = insertRoomSchema;\nconst editRoomFormSchema = insertRoomSchema.pick({\n  name: true,\n  location: true,\n  capacity: true,\n  assignedKitchenUserId: true,\n});\n\nconst changePasswordSchema = z.object({\n  newPassword: z.string().min(6, \"La contrase√±a debe tener al menos 6 caracteres\"),\n  confirmPassword: z.string(),\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Las contrase√±as no coinciden\",\n  path: [\"confirmPassword\"],\n});\n\ntype BookingForm = z.infer<typeof bookingFormSchema>;\ntype RoomForm = z.infer<typeof roomFormSchema>;\ntype EditRoomForm = z.infer<typeof editRoomFormSchema>;\ntype ChangePasswordForm = z.infer<typeof changePasswordSchema>;\n\ninterface DashboardStats {\n  todayBookings: number;\n  activeRooms: number;\n  occupancyRate: number;\n  activeUsers: number;\n}\n\ninterface RoomStats {\n  roomId: string;\n  roomName: string;\n  bookingCount: number;\n  location: string;\n}\n\nexport default function HomePage() {\n  const { user, logoutMutation } = useAuth();\n  const { toast } = useToast();\n  const [activeScreen, setActiveScreen] = useState(\"dashboard\");\n  const { isConnected: wsConnected, lastMessage: wsLastMessage } = useWebSocket();\n  const lastNotificationId = React.useRef<string | null>(null);\n  const [newBookingOpen, setNewBookingOpen] = useState(false);\n  const [newRoomOpen, setNewRoomOpen] = useState(false);\n  const [editRoomOpen, setEditRoomOpen] = useState(false);\n  const [editingRoom, setEditingRoom] = useState<Room | null>(null);\n  const [changePasswordOpen, setChangePasswordOpen] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [showAllBookings, setShowAllBookings] = useState(false);\n\n  // Queries - Available to all users\n  const { data: dashboardStats, isLoading: statsLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n    enabled: Boolean(user),\n  });\n\n  const { data: roomStats, isLoading: roomStatsLoading } = useQuery<RoomStats[]>({\n    queryKey: [\"/api/dashboard/room-stats\"],\n    enabled: Boolean(user?.isAdmin),\n  });\n\n  const { data: rooms, isLoading: roomsLoading } = useQuery<Room[]>({\n    queryKey: [\"/api/rooms\"],\n  });\n\n  // Get all bookings for dashboard, user bookings for \"Mis Reservas\"\n  const { data: allBookings, isLoading: allBookingsLoading } = useQuery<BookingWithDetails[]>({\n    queryKey: [\"/api/bookings/all\"],\n  });\n\n  const { data: userBookings, isLoading: userBookingsLoading } = useQuery<BookingWithDetails[]>({\n    queryKey: [\"/api/bookings\"],\n  });\n\n  const { data: allUsers, isLoading: usersLoading } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n    enabled: Boolean(user?.isAdmin),\n  });\n\n  // Mutations\n  const createBookingMutation = useMutation({\n    mutationFn: async (data: BookingForm) => {\n      try {\n        const res = await apiRequest(\"POST\", \"/api/bookings\", data);\n        return await res.json();\n      } catch (error: any) {\n        // Handle specific HTTP status codes\n        if (error.message.includes('409:')) {\n          throw new Error('Esta sala j√° est√° reservada para este hor√°rio. Por favor, escolha outro hor√°rio ou sala.');\n        } else if (error.message.includes('400:')) {\n          throw new Error('Datos de la reserva inv√°lidos. Verifique que la hora de fin sea posterior a la de inicio.');\n        }\n        throw error;\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings/all\"] });\n      if (user?.isAdmin) {\n        queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/room-stats\"] });\n      }\n      \n      // Clear the form fields\n      bookingForm.reset({\n        title: \"\",\n        description: \"\",\n        responsavel: \"\",\n        date: \"\",\n        startTime: \"\",\n        endTime: \"\",\n        roomId: \"\",\n        cafeRequested: false,\n        peopleCount: undefined,\n        requestedMeals: \"\",\n        requestedDrinks: \"\",\n      });\n      \n      setNewBookingOpen(false);\n      toast({\n        title: \"Reserva creada\",\n        description: \"¬°Su reserva fue creada con √©xito!\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error al crear reserva\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createRoomMutation = useMutation({\n    mutationFn: async (data: RoomForm) => {\n      const res = await apiRequest(\"POST\", \"/api/rooms\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/rooms\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/room-stats\"] });\n      \n      // Clear the form fields\n      roomForm.reset({\n        name: \"\",\n        location: \"\",\n        capacity: 1,\n        assignedKitchenUserId: \"\",\n      });\n      \n      setNewRoomOpen(false);\n      toast({\n        title: \"Sala criada\",\n        description: \"Nova sala foi cadastrada com sucesso!\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro ao criar sala\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteBookingMutation = useMutation({\n    mutationFn: async (data: { id: string; isAdminAction?: boolean; bookingOwner?: string }) => {\n      await apiRequest(\"DELETE\", `/api/bookings/${data.id}`);\n      return data;\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings/all\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/room-stats\"] });\n      \n      const isAdminCancellation = data.isAdminAction && data.bookingOwner !== user?.fullName;\n      \n      toast({\n        title: isAdminCancellation ? \"Reserva cancelada (Admin)\" : \"Reserva cancelada\",\n        description: isAdminCancellation \n          ? `Reserva de ${data.bookingOwner} cancelada exitosamente`\n          : \"¬°La reserva fue cancelada con √©xito!\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error al cancelar reserva\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteRoomMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/rooms/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/rooms\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/room-stats\"] });\n      toast({\n        title: \"Sala removida\",\n        description: \"Sala foi removida com sucesso!\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro ao remover sala\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateRoomMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: EditRoomForm }) => {\n      const res = await apiRequest(\"PATCH\", `/api/rooms/${id}`, data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/rooms\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/room-stats\"] });\n      setEditRoomOpen(false);\n      setEditingRoom(null);\n      toast({\n        title: \"Sala atualizada\",\n        description: \"As informa√ß√µes da sala foram atualizadas com sucesso!\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro ao atualizar sala\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateUserAdminMutation = useMutation({\n    mutationFn: async ({ id, isAdmin }: { id: string; isAdmin: boolean }) => {\n      await apiRequest(\"PATCH\", `/api/users/${id}/admin`, { isAdmin });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Permiss√µes atualizadas\",\n        description: \"As permiss√µes do usu√°rio foram atualizadas com sucesso!\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro ao atualizar permiss√µes\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateUserKitchenMutation = useMutation({\n    mutationFn: async ({ id, isKitchen }: { id: string; isKitchen: boolean }) => {\n      await apiRequest(\"PATCH\", `/api/users/${id}/kitchen`, { isKitchen });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Permisos de cocina actualizados\",\n        description: \"Los permisos de cocina del usuario han sido actualizados correctamente\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error al actualizar permisos de cocina\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const changePasswordMutation = useMutation({\n    mutationFn: async (data: { userId: string; newPassword: string }) => {\n      const res = await apiRequest(\"PUT\", `/api/users/${data.userId}/password`, { password: data.newPassword });\n      return await res.json();\n    },\n    onSuccess: () => {\n      changePasswordForm.reset();\n      setChangePasswordOpen(false);\n      toast({\n        title: \"Senha alterada\",\n        description: \"A senha do usu√°rio foi alterada com sucesso!\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro ao alterar senha\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Forms\n  const bookingForm = useForm<BookingForm>({\n    resolver: zodResolver(bookingFormSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      responsavel: \"\",\n      date: \"\",\n      startTime: \"\",\n      endTime: \"\",\n      roomId: \"\",\n      cafeRequested: false,\n      peopleCount: undefined,\n      requestedMeals: \"\",\n      requestedDrinks: \"\",\n    },\n  });\n\n  const roomForm = useForm<RoomForm>({\n    resolver: zodResolver(roomFormSchema),\n    defaultValues: {\n      name: \"\",\n      location: \"\",\n      capacity: 1,\n    },\n  });\n\n  const editRoomForm = useForm<EditRoomForm>({\n    resolver: zodResolver(editRoomFormSchema),\n    defaultValues: {\n      name: \"\",\n      location: \"\",\n      capacity: 1,\n      assignedKitchenUserId: \"\",\n    },\n  });\n\n  const changePasswordForm = useForm<ChangePasswordForm>({\n    resolver: zodResolver(changePasswordSchema),\n    defaultValues: {\n      newPassword: \"\",\n      confirmPassword: \"\",\n    }\n  });\n\n  const onCreateBooking = async (data: BookingForm) => {\n    await createBookingMutation.mutateAsync(data);\n  };\n\n  const onCreateRoom = async (data: RoomForm) => {\n    await createRoomMutation.mutateAsync(data);\n  };\n\n  const onEditRoom = async (data: EditRoomForm) => {\n    if (!editingRoom) return;\n    await updateRoomMutation.mutateAsync({ id: editingRoom.id, data });\n  };\n\n  const handleEditRoom = (room: Room) => {\n    setEditingRoom(room);\n    editRoomForm.reset({\n      name: room.name,\n      location: room.location,\n      capacity: room.capacity,\n      assignedKitchenUserId: room.assignedKitchenUserId || \"\",\n    });\n    setEditRoomOpen(true);\n  };\n\n  const handleLogout = async () => {\n    await logoutMutation.mutateAsync();\n  };\n\n  const handleChangePassword = (userItem: User) => {\n    setSelectedUser(userItem);\n    changePasswordForm.reset();\n    setChangePasswordOpen(true);\n  };\n\n  const onChangePassword = async (data: ChangePasswordForm) => {\n    if (!selectedUser) return;\n    await changePasswordMutation.mutateAsync({ \n      userId: selectedUser.id, \n      newPassword: data.newPassword \n    });\n  };\n\n  // Helper function to format date without timezone issues\n  const formatDate = (dateString: string) => {\n    const [year, month, day] = dateString.split('-');\n    return `${day}/${month}/${year}`;\n  };\n\n  // Get future bookings in chronological order for dashboard\n  const dashboardBookings = allBookings?.filter(booking => {\n    const bookingDateTime = new Date(`${booking.date}T${booking.endTime}:00`);\n    const now = new Date();\n    return bookingDateTime > now;\n  }).sort((a, b) => {\n    // Sort by date first, then by start time\n    const dateComparison = new Date(a.date).getTime() - new Date(b.date).getTime();\n    if (dateComparison !== 0) return dateComparison;\n    return a.startTime.localeCompare(b.startTime);\n  }) || [];\n\n  // Use appropriate bookings based on screen and admin settings\n  const getBookingsToShow = () => {\n    if (activeScreen === \"bookings\") {\n      // In bookings screen, show user bookings or all bookings based on admin toggle\n      return (user?.isAdmin && showAllBookings) ? allBookings : userBookings;\n    }\n    // In dashboard, always show dashboard bookings (future bookings)\n    return dashboardBookings;\n  };\n\n  const displayBookings = getBookingsToShow();\n  const bookingsLoading = activeScreen === \"bookings\" ? \n    ((user?.isAdmin && showAllBookings) ? allBookingsLoading : userBookingsLoading) : \n    allBookingsLoading;\n\n  // Get top and least used rooms\n  const topRooms = roomStats?.slice(0, 3) || [];\n  const leastUsedRooms = roomStats?.slice(-3).reverse() || [];\n\n  // Generate available time slots (7:00 AM to 6:00 PM, every 30 minutes)\n  const generateTimeSlots = () => {\n    const slots = [];\n    for (let hour = 7; hour <= 18; hour++) {\n      for (let minute = 0; minute < 60; minute += 30) {\n        // Don't include 18:30 as it's past closing time\n        if (hour === 18 && minute === 30) break;\n        const timeString = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n        slots.push(timeString);\n      }\n    }\n    return slots;\n  };\n\n  // Check if a time slot conflicts with existing bookings\n  const isTimeSlotAvailable = (date: string, roomId: string, timeSlot: string, excludeBookingId?: string) => {\n    if (!allBookings || !date || !roomId) return true;\n\n    const dayBookings = allBookings.filter((booking: BookingWithDetails) => \n      booking.date === date && \n      booking.roomId === roomId && \n      booking.status === 'confirmed' &&\n      booking.id !== excludeBookingId\n    );\n\n    const slotTime = new Date(`${date}T${timeSlot}:00`);\n\n    return !dayBookings.some((booking: BookingWithDetails) => {\n      const startTime = new Date(`${booking.date}T${booking.startTime}:00`);\n      const endTime = new Date(`${booking.date}T${booking.endTime}:00`);\n      // Check if the slot time falls within any existing booking\n      return slotTime >= startTime && slotTime < endTime;\n    });\n  };\n\n  // Get available start time slots for a specific date and room\n  const getAvailableStartTimes = (date: string, roomId: string) => {\n    if (!date || !roomId) return [];\n    \n    const allSlots = generateTimeSlots();\n    return allSlots.filter(slot => isTimeSlotAvailable(date, roomId, slot));\n  };\n\n  // Get available end times based on start time\n  const getAvailableEndTimes = (date: string, roomId: string, startTime: string) => {\n    if (!date || !roomId || !startTime) return [];\n\n    const allSlots = generateTimeSlots();\n    const startIndex = allSlots.indexOf(startTime);\n    \n    if (startIndex === -1) return [];\n\n    // Get all possible end times (must be after start time)\n    const possibleEndTimes = allSlots.slice(startIndex + 1);\n    \n    // Filter end times that don't conflict with existing bookings\n    const availableEndTimes = [];\n    \n    for (const endTime of possibleEndTimes) {\n      // Check if the entire time range from startTime to endTime is available\n      const startSlotIndex = allSlots.indexOf(startTime);\n      const endSlotIndex = allSlots.indexOf(endTime);\n      \n      let isRangeAvailable = true;\n      \n      // Check each 30-minute slot in the range\n      for (let i = startSlotIndex; i < endSlotIndex; i++) {\n        if (!isTimeSlotAvailable(date, roomId, allSlots[i])) {\n          isRangeAvailable = false;\n          break;\n        }\n      }\n      \n      if (isRangeAvailable) {\n        availableEndTimes.push(endTime);\n      } else {\n        // Stop at first conflict to ensure continuous availability\n        break;\n      }\n    }\n    \n    return availableEndTimes;\n  };\n\n  // Watch form values for dynamic updates\n  const watchedDate = bookingForm.watch(\"date\");\n  const watchedRoomId = bookingForm.watch(\"roomId\");\n  const watchedStartTime = bookingForm.watch(\"startTime\");\n\n  const availableStartTimes = getAvailableStartTimes(watchedDate, watchedRoomId);\n  const availableEndTimes = getAvailableEndTimes(watchedDate, watchedRoomId, watchedStartTime);\n\n  // Reset end time when date, room, or start time changes\n  React.useEffect(() => {\n    if (watchedDate || watchedRoomId || watchedStartTime) {\n      const currentEndTime = bookingForm.getValues(\"endTime\");\n      if (currentEndTime && !availableEndTimes.includes(currentEndTime)) {\n        bookingForm.setValue(\"endTime\", \"\");\n      }\n    }\n  }, [watchedDate, watchedRoomId, watchedStartTime, availableEndTimes, bookingForm]);\n\n  // Kitchen Panel Component\n  const KitchenPanelContent = () => {\n    const [selectedStatus, setSelectedStatus] = useState<'pending' | 'completed' | 'all'>('pending');\n\n    const { data: orders, isLoading: ordersLoading } = useQuery<KitchenOrderWithDetails[]>({\n      queryKey: [\"/api/kitchen/orders\"],\n      refetchInterval: 30000, // Refetch every 30 seconds for real-time updates\n      enabled: Boolean(user?.isKitchen),\n    });\n\n    // Handle real-time WebSocket notifications\n    React.useEffect(() => {\n      if (wsLastMessage?.type === 'NEW_KITCHEN_ORDER' && wsLastMessage.order?.id) {\n        // Prevent duplicate notifications\n        if (lastNotificationId.current !== wsLastMessage.order.id) {\n          lastNotificationId.current = wsLastMessage.order.id;\n          \n          // Instantly refresh orders when new order arrives\n          queryClient.invalidateQueries({ queryKey: [\"/api/kitchen/orders\"] });\n          \n          // Show notification toast only once per order\n          toast({\n            title: \"¬°Nuevo pedido de caf√©!\",\n            description: wsLastMessage.message || \"Ha llegado un nuevo pedido\",\n            duration: 5000,\n          });\n        }\n      }\n    }, [wsLastMessage]);\n\n    const completeOrderMutation = useMutation({\n      mutationFn: async (orderId: string) => {\n        const res = await apiRequest(\"PATCH\", `/api/kitchen/orders/${orderId}/complete`, {});\n        return await res.json();\n      },\n      onSuccess: () => {\n        queryClient.invalidateQueries({ queryKey: [\"/api/kitchen/orders\"] });\n        toast({\n          title: \"Pedido completado\",\n          description: \"El pedido ha sido marcado como atendido\",\n        });\n      },\n      onError: () => {\n        toast({\n          title: \"Error\",\n          description: \"No se pudo completar el pedido\",\n          variant: \"destructive\",\n        });\n      },\n    });\n\n    const filteredOrders = orders?.filter(order => {\n      if (selectedStatus === 'all') return true;\n      return order.status === selectedStatus;\n    }) || [];\n\n    const pendingCount = orders?.filter(o => o.status === 'pending').length || 0;\n    const completedCount = orders?.filter(o => o.status === 'completed').length || 0;\n\n    if (ordersLoading) {\n      return (\n        <div className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {Array.from({ length: 3 }).map((_, i) => (\n              <Skeleton key={i} className=\"h-24\" />\n            ))}\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {Array.from({ length: 6 }).map((_, i) => (\n              <Skeleton key={i} className=\"h-48\" />\n            ))}\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"space-y-6\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-500 mb-1\">Pedidos Pendientes</p>\n                  <p className=\"text-2xl font-bold text-orange-600\">{pendingCount}</p>\n                </div>\n                <div className=\"w-12 h-12 bg-orange-100 rounded-full flex items-center justify-center\">\n                  <Clock className=\"text-orange-600 h-5 w-5\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-500 mb-1\">Completados Hoy</p>\n                  <p className=\"text-2xl font-bold text-green-600\">{completedCount}</p>\n                </div>\n                <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n                  <CheckCircle2 className=\"text-green-600 h-5 w-5\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-500 mb-1\">Total Pedidos</p>\n                  <p className=\"text-2xl font-bold text-blue-600\">{orders?.length || 0}</p>\n                </div>\n                <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n                  <Utensils className=\"text-blue-600 h-5 w-5\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filter Buttons */}\n        <div className=\"flex gap-2 flex-wrap\">\n          <Button\n            variant={selectedStatus === 'pending' ? \"default\" : \"outline\"}\n            onClick={() => setSelectedStatus('pending')}\n            className=\"gap-2\"\n          >\n            <Clock className=\"h-4 w-4\" />\n            Pendientes ({pendingCount})\n          </Button>\n          <Button\n            variant={selectedStatus === 'completed' ? \"default\" : \"outline\"}\n            onClick={() => setSelectedStatus('completed')}\n            className=\"gap-2\"\n          >\n            <CheckCircle2 className=\"h-4 w-4\" />\n            Completados ({completedCount})\n          </Button>\n          <Button\n            variant={selectedStatus === 'all' ? \"default\" : \"outline\"}\n            onClick={() => setSelectedStatus('all')}\n            className=\"gap-2\"\n          >\n            <Bell className=\"h-4 w-4\" />\n            Todos ({orders?.length || 0})\n          </Button>\n        </div>\n\n        {/* Orders Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {filteredOrders.length === 0 ? (\n            <div className=\"col-span-full\">\n              <Card>\n                <CardContent className=\"text-center py-8\">\n                  <Coffee className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-500\">\n                    {selectedStatus === 'pending' ? 'No hay pedidos pendientes' :\n                     selectedStatus === 'completed' ? 'No hay pedidos completados' :\n                     'No hay pedidos registrados'}\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          ) : (\n            filteredOrders.map((order) => (\n              <Card key={order.id} className={`${order.status === 'pending' ? 'border-orange-200 bg-orange-50' : 'border-green-200 bg-green-50'}`}>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-lg\">{order.booking?.title || 'Pedido de Caf√©'}</CardTitle>\n                    <Badge variant={order.status === 'pending' ? \"destructive\" : \"default\"}>\n                      {order.status === 'pending' ? 'Pendiente' : 'Completado'}\n                    </Badge>\n                  </div>\n                  <div className=\"text-sm text-gray-600\">\n                    <p><strong>Sala:</strong> {order.room?.name || 'N/A'}</p>\n                    <p><strong>Solicitado por:</strong> {order.user?.fullName || 'N/A'}</p>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"text-sm\">\n                      <p><strong>Fecha:</strong> {order.booking?.date ? format(parseISO(order.booking.date), \"d 'de' MMMM, yyyy\", { locale: es }) : 'Fecha no disponible'}</p>\n                      <p><strong>Hora:</strong> {order.booking?.startTime || 'N/A'} - {order.booking?.endTime || 'N/A'}</p>\n                    </div>\n                    \n                    <div className=\"bg-white p-3 rounded border\">\n                      <p className=\"text-sm\"><strong>Solicitud especial:</strong></p>\n                      <p className=\"text-sm text-gray-700 mt-1\"><strong>Cantidad de personas:</strong> {order.peopleCount || 'No especificado'}</p>\n                      {order.requestedMeals && (\n                        <p className=\"text-sm text-gray-700 mt-1\"><strong>Comidas:</strong> {order.requestedMeals}</p>\n                      )}\n                      {order.requestedDrinks && (\n                        <p className=\"text-sm text-gray-700 mt-1\"><strong>Bebidas:</strong> {order.requestedDrinks}</p>\n                      )}\n                    </div>\n\n                    <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                      <span>Solicitado: {order.createdAt ? format(parseISO(order.createdAt), \"dd/MM/yyyy HH:mm\") : 'Fecha no disponible'}</span>\n                      {order.status === 'completed' && order.completedAt && (\n                        <span>Completado: {order.completedAt ? format(parseISO(order.completedAt), \"dd/MM/yyyy HH:mm\") : 'Fecha no disponible'}</span>\n                      )}\n                    </div>\n\n                    {order.status === 'pending' && (\n                      <Button\n                        onClick={() => completeOrderMutation.mutate(order.id)}\n                        disabled={completeOrderMutation.isPending}\n                        className=\"w-full bg-green-600 hover:bg-green-700\"\n                      >\n                        <CheckCircle2 className=\"h-4 w-4 mr-2\" />\n                        Marcar como Atendido\n                      </Button>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  if (!user) return null;\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      {/* Sidebar */}\n      <div className=\"w-64 bg-white shadow-lg flex flex-col\">\n        <div className=\"p-6 border-b border-gray-200\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n              <Calendar className=\"text-white h-5 w-5\" />\n            </div>\n            <div>\n              <h2 className=\"font-bold text-gray-900\">Reservas</h2>\n              <p className=\"text-xs text-gray-500\">Sistema de Salas</p>\n            </div>\n          </div>\n        </div>\n\n        <nav className=\"flex-1 px-4 py-6 space-y-2\">\n          <Button\n            variant={activeScreen === \"dashboard\" ? \"default\" : \"ghost\"}\n            className=\"w-full justify-start\"\n            onClick={() => setActiveScreen(\"dashboard\")}\n          >\n            <ChartPie className=\"mr-3 h-4 w-4\" />\n            Tablero\n          </Button>\n\n          <Dialog open={newBookingOpen} onOpenChange={setNewBookingOpen}>\n            <DialogTrigger asChild>\n              <Button variant=\"ghost\" className=\"w-full justify-start\">\n                <Plus className=\"mr-3 h-4 w-4\" />\n                Nueva Reserva\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-[95vw] sm:max-w-[500px] max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Nueva Reserva</DialogTitle>\n                <DialogDescription>\n                  Complete los datos para reservar una sala\n                </DialogDescription>\n              </DialogHeader>\n              <Form {...bookingForm}>\n                <form onSubmit={bookingForm.handleSubmit(onCreateBooking)} className=\"space-y-4\">\n                  <FormField\n                    control={bookingForm.control}\n                    name=\"title\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>T√≠tulo de la Reuni√≥n *</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Ej: Reuni√≥n de Planificaci√≥n Mensual\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                    <FormField\n                      control={bookingForm.control}\n                      name=\"date\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Fecha *</FormLabel>\n                          <FormControl>\n                            <Input type=\"date\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={bookingForm.control}\n                      name=\"roomId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Sala *</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Seleccione una sala\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {rooms?.map((room) => (\n                                <SelectItem key={room.id} value={room.id}>\n                                  {room.name} ({room.capacity} personas)\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                    <FormField\n                      control={bookingForm.control}\n                      name=\"startTime\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Hora de Inicio *</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Seleccione la hora\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {availableStartTimes.length === 0 ? (\n                                <SelectItem value=\"none\" disabled>\n                                  {watchedDate && watchedRoomId ? \"Ninguna hora disponible\" : \"Seleccione primero la fecha y sala\"}\n                                </SelectItem>\n                              ) : (\n                                availableStartTimes.map((time) => (\n                                  <SelectItem key={time} value={time}>\n                                    {time}\n                                  </SelectItem>\n                                ))\n                              )}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={bookingForm.control}\n                      name=\"endTime\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Hora de Fin *</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Seleccione la hora\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {availableEndTimes.length === 0 ? (\n                                <SelectItem value=\"none\" disabled>\n                                  {watchedStartTime ? \"Ninguna hora disponible\" : \"Seleccione primero la hora de inicio\"}\n                                </SelectItem>\n                              ) : (\n                                availableEndTimes.map((time) => (\n                                  <SelectItem key={time} value={time}>\n                                    {time}\n                                  </SelectItem>\n                                ))\n                              )}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={bookingForm.control}\n                    name=\"responsavel\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Responsable de la Reuni√≥n</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"Ej: Juan Silva o deje vac√≠o si usted es el responsable\"\n                            {...field}\n                            value={field.value || \"\"}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={bookingForm.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Descripci√≥n</FormLabel>\n                        <FormControl>\n                          <Textarea\n                            placeholder=\"Describa el objetivo de la reuni√≥n...\"\n                            className=\"resize-none\"\n                            {...field}\n                            value={field.value || \"\"}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Caf√© Service Section */}\n                  <div className=\"border rounded-lg p-4 space-y-4 bg-orange-50 border-orange-200\">\n                    <FormField\n                      control={bookingForm.control}\n                      name=\"cafeRequested\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                          <FormControl>\n                            <Checkbox\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                            />\n                          </FormControl>\n                          <div className=\"space-y-1 leading-none\">\n                            <FormLabel className=\"text-base font-medium\">\n                              Solicitar Servicio de CAF√â\n                            </FormLabel>\n                            <p className=\"text-sm text-muted-foreground\">\n                              Marque esta opci√≥n para solicitar servicio de caf√© y alimentos para la reuni√≥n\n                            </p>\n                          </div>\n                        </FormItem>\n                      )}\n                    />\n\n                    {bookingForm.watch(\"cafeRequested\") && (\n                      <div className=\"space-y-4 pl-3 sm:pl-6 border-l-2 border-orange-400\">\n                        <FormField\n                          control={bookingForm.control}\n                          name=\"peopleCount\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Cantidad de Personas *</FormLabel>\n                              <FormControl>\n                                <Input\n                                  type=\"number\"\n                                  min=\"1\"\n                                  max=\"100\"\n                                  placeholder=\"Ej: 5\"\n                                  {...field}\n                                  value={field.value || \"\"}\n                                  onChange={(e) => field.onChange(parseInt(e.target.value) || undefined)}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={bookingForm.control}\n                          name=\"requestedMeals\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Comidas Deseadas</FormLabel>\n                              <FormControl>\n                                <Textarea\n                                  placeholder=\"Ej: Sandwiches de jam√≥n y queso, frutas variadas, galletas\"\n                                  rows={3}\n                                  {...field}\n                                  value={field.value || \"\"}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={bookingForm.control}\n                          name=\"requestedDrinks\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Bebidas Deseadas</FormLabel>\n                              <FormControl>\n                                <Textarea\n                                  placeholder=\"Ej: Caf√© americano, t√©, agua mineral, jugos naturales\"\n                                  rows={3}\n                                  {...field}\n                                  value={field.value || \"\"}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                    <div className=\"flex items-start space-x-3\">\n                      <AlertCircle className=\"h-5 w-5 text-blue-500 mt-0.5\" />\n                      <div>\n                        <h4 className=\"text-sm font-medium text-blue-900 mb-1\">Verificaci√≥n de Disponibilidad</h4>\n                        <p className=\"text-sm text-blue-700\">El sistema verificar√° autom√°ticamente si la sala est√° disponible.</p>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex flex-col sm:flex-row gap-3\">\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      className=\"flex-1 w-full\"\n                      onClick={() => setNewBookingOpen(false)}\n                    >\n                      Cancelar\n                    </Button>\n                    <Button \n                      type=\"submit\" \n                      className=\"flex-1 w-full\"\n                      disabled={createBookingMutation.isPending}\n                    >\n                      Crear Reserva\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n\n          <Button\n            variant={activeScreen === \"bookings\" ? \"default\" : \"ghost\"}\n            className=\"w-full justify-start\"\n            onClick={() => setActiveScreen(\"bookings\")}\n          >\n            <CalendarDays className=\"mr-3 h-4 w-4\" />\n            Mis Reservas\n          </Button>\n\n          {user.isKitchen && (\n            <Button\n              variant={activeScreen === \"kitchen\" ? \"default\" : \"ghost\"}\n              className=\"w-full justify-start\"\n              onClick={() => setActiveScreen(\"kitchen\")}\n            >\n              <Coffee className=\"mr-3 h-4 w-4\" />\n              Panel de Cocina\n            </Button>\n          )}\n          \n          {user.isAdmin && (\n            <>\n              <Button\n                variant={activeScreen === \"rooms\" ? \"default\" : \"ghost\"}\n                className=\"w-full justify-start\"\n                onClick={() => setActiveScreen(\"rooms\")}\n              >\n                <Settings className=\"mr-3 h-4 w-4\" />\n                Gestionar Salas\n              </Button>\n              <Button\n                variant={activeScreen === \"users\" ? \"default\" : \"ghost\"}\n                className=\"w-full justify-start\"\n                onClick={() => setActiveScreen(\"users\")}\n              >\n                <Users className=\"mr-3 h-4 w-4\" />\n                Gestionar Usuarios\n              </Button>\n            </>\n          )}\n        </nav>\n\n        <div className=\"p-4 border-t border-gray-200\">\n          <div className=\"flex items-center space-x-3 mb-4\">\n            <div className=\"w-10 h-10 bg-gray-300 rounded-full flex items-center justify-center\">\n              <Users className=\"text-gray-600 h-5 w-5\" />\n            </div>\n            <div className=\"flex-1\">\n              <p className=\"font-medium text-sm text-gray-900\">{user.fullName}</p>\n              <p className=\"text-xs text-gray-500\">{user.position}</p>\n            </div>\n          </div>\n          <Button\n            variant=\"ghost\"\n            className=\"w-full justify-start text-gray-700\"\n            onClick={handleLogout}\n          >\n            <LogOut className=\"mr-3 h-4 w-4\" />\n            Salir\n          </Button>\n        </div>\n      </div>\n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {activeScreen === \"dashboard\" && (\n          <div className=\"flex-1 overflow-auto p-6 space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Tablero</h1>\n                <p className=\"text-gray-600\">Vista general de las reservas</p>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-sm text-gray-500\">Hoy</p>\n                <p className=\"font-semibold text-gray-900\">\n                  {new Date().toLocaleDateString('es-ES', { \n                    day: 'numeric', \n                    month: 'long', \n                    year: 'numeric' \n                  })}\n                </p>\n              </div>\n            </div>\n\n            {/* Statistics Cards - Available to All Users */}\n            {user && (\n              <div className={`grid grid-cols-1 md:grid-cols-2 ${user.isAdmin ? 'lg:grid-cols-4' : 'lg:grid-cols-3'} gap-6`}>\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm text-gray-500 mb-1\">Reservas Hoy</p>\n                        {statsLoading ? (\n                          <Skeleton className=\"h-8 w-16\" />\n                        ) : (\n                          <p className=\"text-2xl font-bold text-gray-900\">{dashboardStats?.todayBookings || 0}</p>\n                        )}\n                      </div>\n                      <div className=\"w-12 h-12 bg-primary bg-opacity-10 rounded-full flex items-center justify-center\">\n                        <CalendarDays className=\"text-primary h-5 w-5\" />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm text-gray-500 mb-1\">Salas Activas</p>\n                        {statsLoading ? (\n                          <Skeleton className=\"h-8 w-16\" />\n                        ) : (\n                          <p className=\"text-2xl font-bold text-gray-900\">{dashboardStats?.activeRooms || 0}</p>\n                        )}\n                      </div>\n                      <div className=\"w-12 h-12 bg-success bg-opacity-10 rounded-full flex items-center justify-center\">\n                        <DoorOpen className=\"text-success h-5 w-5\" />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm text-gray-500 mb-1\">Tasa de Ocupaci√≥n</p>\n                        {statsLoading ? (\n                          <Skeleton className=\"h-8 w-16\" />\n                        ) : (\n                          <p className=\"text-2xl font-bold text-gray-900\">{dashboardStats?.occupancyRate || 0}%</p>\n                        )}\n                      </div>\n                      <div className=\"w-12 h-12 bg-warning bg-opacity-10 rounded-full flex items-center justify-center\">\n                        <ChartPie className=\"text-warning h-5 w-5\" />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {user.isAdmin && (\n                  <Card>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm text-gray-500 mb-1\">Usuarios Activos</p>\n                          {statsLoading ? (\n                            <Skeleton className=\"h-8 w-16\" />\n                          ) : (\n                            <p className=\"text-2xl font-bold text-gray-900\">{dashboardStats?.activeUsers || 0}</p>\n                          )}\n                        </div>\n                        <div className=\"w-12 h-12 bg-secondary bg-opacity-10 rounded-full flex items-center justify-center\">\n                          <Users className=\"text-secondary h-5 w-5\" />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n            )}\n\n            {/* Room Usage Statistics - Admin Only */}\n            {user.isAdmin && (\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Salas M√°s Reservadas</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {roomStatsLoading ? (\n                      <div className=\"space-y-4\">\n                        {[1, 2, 3].map((i) => (\n                          <Skeleton key={i} className=\"h-16 w-full\" />\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"space-y-4\">\n                        {topRooms.map((room, index) => (\n                          <div key={room.roomId} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white text-sm font-medium ${\n                                index === 0 ? 'bg-primary' : index === 1 ? 'bg-secondary' : 'bg-success'\n                              }`}>\n                                {index + 1}\n                              </div>\n                              <div>\n                                <p className=\"font-medium text-gray-900\">{room.roomName}</p>\n                                <p className=\"text-sm text-gray-500\">{room.location}</p>\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              <p className=\"font-semibold text-gray-900\">{room.bookingCount}</p>\n                              <p className=\"text-sm text-gray-500\">reservas</p>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Salas Menos Utilizadas</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {roomStatsLoading ? (\n                      <div className=\"space-y-4\">\n                        {[1, 2, 3].map((i) => (\n                          <Skeleton key={i} className=\"h-16 w-full\" />\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"space-y-4\">\n                        {leastUsedRooms.map((room) => (\n                          <div key={room.roomId} className=\"flex items-center justify-between p-3 bg-red-50 rounded-lg\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-8 h-8 bg-error rounded-full flex items-center justify-center\">\n                                <AlertCircle className=\"text-white h-4 w-4\" />\n                              </div>\n                              <div>\n                                <p className=\"font-medium text-gray-900\">{room.roomName}</p>\n                                <p className=\"text-sm text-gray-500\">{room.location}</p>\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              <p className=\"font-semibold text-error\">{room.bookingCount}</p>\n                              <p className=\"text-sm text-gray-500\">reservas</p>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n\n\n\n            {/* Upcoming Bookings */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>Reservas</CardTitle>\n                  <Button onClick={() => setNewBookingOpen(true)}>\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    Nueva Reserva\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {bookingsLoading ? (\n                  <div className=\"space-y-4\">\n                    {[1, 2, 3].map((i) => (\n                      <Skeleton key={i} className=\"h-20 w-full\" />\n                    ))}\n                  </div>\n                ) : dashboardBookings.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-500\">Ninguna reserva futura encontrada</p>\n                  </div>\n                ) : (\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full\">\n                      <thead className=\"bg-gray-50\">\n                        <tr>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">T√≠tulo</th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Fecha/Hora</th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Sala</th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Responsable</th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Status</th>\n                        </tr>\n                      </thead>\n                      <tbody className=\"bg-white divide-y divide-gray-200\">\n                        {dashboardBookings.map((booking: BookingWithDetails) => (\n                          <tr key={booking.id} className=\"hover:bg-gray-50\">\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"flex items-center\">\n                                <div className=\"w-3 h-3 bg-primary rounded-full mr-3\"></div>\n                                <div>\n                                  <p className=\"text-sm font-medium text-gray-900\">{booking.title}</p>\n                                  {booking.description && (\n                                    <p className=\"text-xs text-gray-500\">{booking.description}</p>\n                                  )}\n                                  {booking.responsavel && (\n                                    <p className=\"text-xs text-blue-600\">Responsable: {booking.responsavel}</p>\n                                  )}\n                                </div>\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                              <div>\n                                <p>{formatDate(booking.date)}</p>\n                                <p className=\"text-xs text-gray-500\">{booking.startTime} - {booking.endTime}</p>\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{booking.room.name}</td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{booking.user.fullName}</td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <Badge variant={booking.status === \"confirmed\" ? \"default\" : \"secondary\"}>\n                                {booking.status === \"confirmed\" ? \"Confirmado\" : \"Pendente\"}\n                              </Badge>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {activeScreen === \"bookings\" && (\n          <div className=\"flex-1 overflow-auto p-6\">\n            <div className=\"mb-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h1 className=\"text-2xl font-bold text-gray-900\">\n                    {user?.isAdmin && showAllBookings ? \"Pr√≥ximas Reservas\" : \"Mis Pr√≥ximas Reservas\"}\n                  </h1>\n                  <p className=\"text-gray-600\">\n                    {user?.isAdmin && showAllBookings ? \"Visualice las pr√≥ximas reservas del sistema\" : \"Gestione sus pr√≥ximas reservas de salas\"}\n                  </p>\n                </div>\n                {user?.isAdmin && (\n                  <div className=\"flex items-center gap-2\">\n                    <Switch\n                      checked={showAllBookings}\n                      onCheckedChange={setShowAllBookings}\n                      id=\"show-all-bookings\"\n                    />\n                    <label htmlFor=\"show-all-bookings\" className=\"text-sm text-gray-600\">\n                      Ver todas\n                    </label>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              {bookingsLoading ? (\n                <div className=\"space-y-4\">\n                  {[1, 2, 3].map((i) => (\n                    <Skeleton key={i} className=\"h-32 w-full\" />\n                  ))}\n                </div>\n              ) : !displayBookings || displayBookings.filter(booking => {\n                const bookingDateTime = new Date(`${booking.date}T${booking.endTime}:00`);\n                const now = new Date();\n                return bookingDateTime > now;\n              }).length === 0 ? (\n                <Card>\n                  <CardContent className=\"text-center py-8\">\n                    <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-500\">Ninguna reserva pr√≥xima encontrada</p>\n                    <Button onClick={() => setNewBookingOpen(true)} className=\"mt-4\">\n                      <Plus className=\"mr-2 h-4 w-4\" />\n                      Crear Reserva\n                    </Button>\n                  </CardContent>\n                </Card>\n              ) : (\n                displayBookings.filter(booking => {\n                  const bookingDateTime = new Date(`${booking.date}T${booking.endTime}:00`);\n                  const now = new Date();\n                  return bookingDateTime > now;\n                }).map((booking: BookingWithDetails) => (\n                  <Card key={booking.id}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">{booking.title}</h3>\n                          {booking.description && (\n                            <p className=\"text-gray-600 mb-3\">{booking.description}</p>\n                          )}\n                          {booking.responsavel && (\n                            <p className=\"text-gray-600 mb-3\">\n                              <span className=\"font-medium\">Responsable:</span> {booking.responsavel}\n                            </p>\n                          )}\n                          \n                          <div className=\"flex items-center space-x-6 text-sm text-gray-500\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Calendar className=\"h-4 w-4\" />\n                              <span>{formatDate(booking.date)}</span>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <Clock className=\"h-4 w-4\" />\n                              <span>{booking.startTime} - {booking.endTime}</span>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <DoorOpen className=\"h-4 w-4\" />\n                              <span>{booking.room.name}</span>\n                            </div>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-3 ml-4\">\n                          <Badge variant={booking.status === \"confirmed\" ? \"default\" : \"secondary\"}>\n                            {booking.status === \"confirmed\" ? \"Confirmado\" : \"Pendente\"}\n                          </Badge>\n                          <div className=\"flex space-x-2\">\n                            {/* Show cancel button if user owns the booking OR if user is admin */}\n                            {(booking.userId === user?.id || user?.isAdmin) && (\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => deleteBookingMutation.mutate({\n                                  id: booking.id,\n                                  isAdminAction: user?.isAdmin,\n                                  bookingOwner: booking.user.fullName\n                                })}\n                                disabled={deleteBookingMutation.isPending}\n                                title={user?.isAdmin && booking.userId !== user?.id ? \n                                  \"Cancelar reserva (Admin)\" : \"Cancelar mi reserva\"}\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            )}\n                            {/* Show owner info for admins viewing other people's bookings */}\n                            {user?.isAdmin && booking.userId !== user?.id && (\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                Por: {booking.user.fullName}\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n              )}\n            </div>\n          </div>\n        )}\n\n        {activeScreen === \"users\" && user?.isAdmin && (\n          <div className=\"flex-1 overflow-auto p-6\">\n            <div className=\"mb-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h1 className=\"text-2xl font-bold text-gray-900\">Gestionar Usuarios</h1>\n                  <p className=\"text-gray-600\">Controle los permisos de administrador de los usuarios</p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"grid gap-4\">\n              {usersLoading ? (\n                <div className=\"space-y-4\">\n                  {[1, 2, 3].map((i) => (\n                    <Skeleton key={i} className=\"h-20 w-full\" />\n                  ))}\n                </div>\n              ) : allUsers?.length === 0 ? (\n                <Card>\n                  <CardContent className=\"text-center py-8\">\n                    <UserIcon className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-500\">Ning√∫n usuario encontrado</p>\n                  </CardContent>\n                </Card>\n              ) : (\n                allUsers?.map((userItem) => (\n                  <Card key={userItem.id}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-12 h-12 bg-gray-200 rounded-full flex items-center justify-center\">\n                            <UserIcon className=\"h-6 w-6 text-gray-600\" />\n                          </div>\n                          <div>\n                            <h3 className=\"text-lg font-semibold text-gray-900\">{userItem.fullName}</h3>\n                            <p className=\"text-sm text-gray-500\">{userItem.email}</p>\n                            <p className=\"text-xs text-gray-400\">{userItem.position}</p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-4\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleChangePassword(userItem)}\n                            disabled={changePasswordMutation.isPending}\n                            data-testid={`button-change-password-${userItem.id}`}\n                          >\n                            <Key className=\"h-4 w-4 mr-2\" />\n                            Cambiar Contrase√±a\n                          </Button>\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"text-sm text-gray-600\">Administrador</span>\n                            <Switch\n                              checked={userItem.isAdmin}\n                              onCheckedChange={(checked) => \n                                updateUserAdminMutation.mutate({ \n                                  id: userItem.id, \n                                  isAdmin: checked \n                                })\n                              }\n                              disabled={updateUserAdminMutation.isPending || userItem.id === user.id}\n                            />\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"text-sm text-gray-600\">Cocina</span>\n                            <Switch\n                              checked={userItem.isKitchen}\n                              onCheckedChange={(checked) => \n                                updateUserKitchenMutation.mutate({ \n                                  id: userItem.id, \n                                  isKitchen: checked \n                                })\n                              }\n                              disabled={updateUserKitchenMutation.isPending}\n                            />\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            {userItem.isAdmin && (\n                              <Badge variant=\"default\">Admin</Badge>\n                            )}\n                            {userItem.isKitchen && (\n                              <Badge variant=\"secondary\" className=\"bg-orange-100 text-orange-800\">\n                                <Coffee className=\"h-3 w-3 mr-1\" />\n                                Cocina\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n              )}\n            </div>\n          </div>\n        )}\n\n        {activeScreen === \"rooms\" && user.isAdmin && (\n          <div className=\"flex-1 overflow-auto p-6\">\n            <div className=\"mb-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h1 className=\"text-2xl font-bold text-gray-900\">Gestionar Salas</h1>\n                  <p className=\"text-gray-600\">Registre y gestione las salas de reuni√≥n</p>\n                </div>\n                <Dialog open={newRoomOpen} onOpenChange={setNewRoomOpen}>\n                  <DialogTrigger asChild>\n                    <Button>\n                      <Plus className=\"mr-2 h-4 w-4\" />\n                      Nueva Sala\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle className=\"flex items-center gap-2\">\n                        <DoorOpen className=\"h-5 w-5 text-primary\" />\n                        Nueva Sala\n                      </DialogTitle>\n                      <DialogDescription>\n                        Registre una nueva sala de reuni√≥n\n                      </DialogDescription>\n                    </DialogHeader>\n                    <Form {...roomForm}>\n                      <form onSubmit={roomForm.handleSubmit(onCreateRoom)} className=\"space-y-4\">\n                        <FormField\n                          control={roomForm.control}\n                          name=\"name\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Nombre de la Sala *</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Ej: Sala Ejecutiva Premium\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={roomForm.control}\n                          name=\"location\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Ubicaci√≥n *</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Ej: 3er Piso - Ala Oeste\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={roomForm.control}\n                          name=\"capacity\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Capacidad M√°xima *</FormLabel>\n                              <FormControl>\n                                <Input \n                                  type=\"number\" \n                                  min=\"1\" \n                                  max=\"500\"\n                                  placeholder=\"Ej: 15\" \n                                  {...field}\n                                  onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={roomForm.control}\n                          name=\"assignedKitchenUserId\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Usuario de Cocina Asignado</FormLabel>\n                              <Select \n                                onValueChange={(value) => field.onChange(value === \"none\" ? \"\" : value)} \n                                defaultValue={field.value || \"none\"}\n                              >\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Seleccionar usuario de cocina (opcional)\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"none\">Sin asignar</SelectItem>\n                                  {allUsers?.filter(u => u.isKitchen).map((kitchenUser) => (\n                                    <SelectItem key={kitchenUser.id} value={kitchenUser.id}>\n                                      {kitchenUser.fullName} ({kitchenUser.username})\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <p className=\"text-sm text-muted-foreground\">\n                                Este usuario recibir√° las notificaciones de pedidos de caf√© para esta sala\n                              </p>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"flex gap-3\">\n                          <Button \n                            type=\"button\" \n                            variant=\"outline\" \n                            className=\"flex-1\"\n                            onClick={() => setNewRoomOpen(false)}\n                          >\n                            Cancelar\n                          </Button>\n                          <Button \n                            type=\"submit\" \n                            className=\"flex-1\"\n                            disabled={createRoomMutation.isPending}\n                          >\n                            Crear Sala\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {roomsLoading ? (\n                [...Array(6)].map((_, i) => (\n                  <Skeleton key={i} className=\"h-64 w-full\" />\n                ))\n              ) : rooms?.length === 0 ? (\n                <Card className=\"col-span-full\">\n                  <CardContent className=\"text-center py-8\">\n                    <DoorOpen className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-500\">Ninguna sala registrada</p>\n                    <Button onClick={() => setNewRoomOpen(true)} className=\"mt-4\">\n                      <Plus className=\"mr-2 h-4 w-4\" />\n                      Crear Primera Sala\n                    </Button>\n                  </CardContent>\n                </Card>\n              ) : (\n                rooms?.map((room) => {\n                  const roomBookings = roomStats?.find(stat => stat.roomId === room.id)?.bookingCount || 0;\n                  const occupancyRate = Math.min(Math.round((roomBookings / 30) * 100), 100); // Simplified calculation\n                  \n                  return (\n                    <Card key={room.id}>\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-start justify-between mb-4\">\n                          <div className=\"flex-1\">\n                            <h3 className=\"text-lg font-semibold text-gray-900 mb-1\">{room.name}</h3>\n                            <p className=\"text-sm text-gray-500 mb-2\">{room.location}</p>\n                            <div className=\"flex items-center space-x-4 text-sm text-gray-600\">\n                              <div className=\"flex items-center space-x-1\">\n                                <Users className=\"h-4 w-4\" />\n                                <span>{room.capacity} personas</span>\n                              </div>\n                              <div className=\"flex items-center space-x-1\">\n                                <Calendar className=\"h-4 w-4\" />\n                                <span>{roomBookings} reservas</span>\n                              </div>\n                            </div>\n                            {room.assignedKitchenUserId && (\n                              <div className=\"mt-2 flex items-center space-x-1 text-xs text-green-600\">\n                                <Coffee className=\"h-3 w-3\" />\n                                <span>\n                                  Cocina: {allUsers?.find(u => u.id === room.assignedKitchenUserId)?.fullName || 'Usuario asignado'}\n                                </span>\n                              </div>\n                            )}\n                          </div>\n                          <div className=\"flex space-x-2 ml-4\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleEditRoom(room)}\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => deleteRoomMutation.mutate(room.id)}\n                              disabled={deleteRoomMutation.isPending}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n\n                        <div className=\"space-y-3\">\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm text-gray-600\">Tasa de ocupaci√≥n</span>\n                            <span className=\"text-sm font-medium text-gray-900\">{occupancyRate}%</span>\n                          </div>\n                          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                            <div \n                              className={`h-2 rounded-full ${\n                                occupancyRate >= 80 ? 'bg-primary' : \n                                occupancyRate >= 50 ? 'bg-secondary' :\n                                occupancyRate >= 25 ? 'bg-warning' : 'bg-error'\n                              }`}\n                              style={{ width: `${occupancyRate}%` }}\n                            ></div>\n                          </div>\n                        </div>\n\n                        <div className=\"mt-4 pt-4 border-t border-gray-200\">\n                          <div className=\"flex items-center justify-between text-sm\">\n                            <span className=\"text-gray-500\">Status</span>\n                            <Badge variant={room.isActive ? \"default\" : \"secondary\"}>\n                              {room.isActive ? \"Activa\" : \"Inactiva\"}\n                            </Badge>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })\n              )}\n            </div>\n          </div>\n        )}\n\n        {activeScreen === \"kitchen\" && user?.isKitchen && (\n          <div className=\"flex-1 overflow-auto p-6\">\n            <div className=\"mb-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <Coffee className=\"h-8 w-8 text-orange-600\" />\n                  <div>\n                    <h1 className=\"text-2xl font-bold text-gray-900\">Panel de Cocina</h1>\n                    <p className=\"text-gray-600\">Gestione las solicitudes de caf√© y alimentos</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"text-right\">\n                    <p className=\"text-sm text-gray-500\">Tiempo Real</p>\n                    <p className=\"font-semibold text-gray-900\">Actualizaci√≥n Autom√°tica</p>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className={`w-2 h-2 rounded-full ${wsConnected ? 'bg-green-500' : 'bg-red-500'}`}></div>\n                    <span className={`text-xs font-medium ${wsConnected ? 'text-green-600' : 'text-red-600'}`}>\n                      {wsConnected ? 'Conectado' : 'Desconectado'}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <KitchenPanelContent />\n          </div>\n        )}\n      </div>\n      {/* Edit Room Dialog */}\n      <Dialog open={editRoomOpen} onOpenChange={setEditRoomOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Edit className=\"h-5 w-5 text-primary\" />\n              Editar Sala\n            </DialogTitle>\n            <DialogDescription>\n              Actualice la informaci√≥n de la sala\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...editRoomForm}>\n            <form onSubmit={editRoomForm.handleSubmit(onEditRoom)} className=\"space-y-4\">\n              <FormField\n                control={editRoomForm.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Nombre de la Sala *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Ej: Sala Ejecutiva Premium\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={editRoomForm.control}\n                name=\"location\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Ubicaci√≥n *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Ej: 3er Piso - Ala Oeste\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={editRoomForm.control}\n                name=\"capacity\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Capacidad M√°xima *</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        min=\"1\" \n                        max=\"500\"\n                        placeholder=\"Ej: 20\"\n                        {...field}\n                        onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={editRoomForm.control}\n                name=\"assignedKitchenUserId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Usuario de Cocina Asignado</FormLabel>\n                    <Select \n                      onValueChange={(value) => field.onChange(value === \"none\" ? \"\" : value)} \n                      value={field.value || \"none\"}\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Seleccionar usuario de cocina (opcional)\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"none\">Sin asignar</SelectItem>\n                        {allUsers?.filter(u => u.isKitchen).map((kitchenUser) => (\n                          <SelectItem key={kitchenUser.id} value={kitchenUser.id}>\n                            {kitchenUser.fullName} ({kitchenUser.username})\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Este usuario recibir√° las notificaciones de pedidos de caf√© para esta sala\n                    </p>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex gap-3\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  className=\"flex-1\"\n                  onClick={() => {\n                    setEditRoomOpen(false);\n                    setEditingRoom(null);\n                  }}\n                >\n                  Cancelar\n                </Button>\n                <Button \n                  type=\"submit\" \n                  className=\"flex-1\"\n                  disabled={updateRoomMutation.isPending}\n                >\n                  Actualizar Sala\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n      {/* Change Password Dialog */}\n      <Dialog open={changePasswordOpen} onOpenChange={setChangePasswordOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Key className=\"h-5 w-5 text-primary\" />\n              Cambiar Contrase√±a del Usuario\n            </DialogTitle>\n            <DialogDescription>\n              {selectedUser && `Cambiando la contrase√±a para: ${selectedUser.fullName} (${selectedUser.email})`}\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...changePasswordForm}>\n            <form onSubmit={changePasswordForm.handleSubmit(onChangePassword)} className=\"space-y-4\">\n              <FormField\n                control={changePasswordForm.control}\n                name=\"newPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Nueva Contrase√±a *</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"password\" \n                        placeholder=\"Ingrese la nueva contrase√±a\" \n                        {...field}\n                        data-testid=\"input-new-password\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={changePasswordForm.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Confirmar Nueva Contrase√±a *</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"password\" \n                        placeholder=\"Ingrese nuevamente la nueva contrase√±a\" \n                        {...field}\n                        data-testid=\"input-confirm-password\"\n                      /> \n                      \n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex gap-3\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  className=\"flex-1\"\n                  onClick={() => {\n                    setChangePasswordOpen(false);\n                    setSelectedUser(null);\n                    changePasswordForm.reset();\n                  }}\n                  data-testid=\"button-cancel-password\"\n                >\n                  Cancelar\n                </Button>\n                <Button \n                  type=\"submit\" \n                  className=\"flex-1\"\n                  disabled={changePasswordMutation.isPending}\n                  data-testid=\"button-confirm-password\"\n                >\n                  {changePasswordMutation.isPending ? \"Cambiando...\" : \"Cambiar Contrase√±a\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":89488},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/kitchen-panel.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { KitchenOrderWithDetails } from \"@shared/schema\";\nimport { CheckCircle2, Clock, Users, Coffee, Utensils, Bell } from \"lucide-react\";\nimport { format, parseISO } from \"date-fns\";\nimport { es } from \"date-fns/locale\";\n\nexport default function KitchenPanel() {\n  const { toast } = useToast();\n  const [selectedStatus, setSelectedStatus] = useState<'pending' | 'completed' | 'all'>('pending');\n\n  const { data: orders, isLoading } = useQuery<KitchenOrderWithDetails[]>({\n    queryKey: [\"/api/kitchen/orders\"],\n    refetchInterval: 30000, // Refetch every 30 seconds for real-time updates\n  });\n\n  const completeOrderMutation = useMutation({\n    mutationFn: async (orderId: string) => {\n      const res = await apiRequest(\"PATCH\", `/api/kitchen/orders/${orderId}/complete`, {});\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/kitchen/orders\"] });\n      toast({\n        title: \"Pedido completado\",\n        description: \"El pedido ha sido marcado como atendido\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo completar el pedido\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredOrders = orders?.filter(order => {\n    if (selectedStatus === 'all') return true;\n    return order.status === selectedStatus;\n  }) || [];\n\n  const pendingCount = orders?.filter(o => o.status === 'pending').length || 0;\n  const completedCount = orders?.filter(o => o.status === 'completed').length || 0;\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"space-y-4\">\n          <Skeleton className=\"h-8 w-64\" />\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {Array.from({ length: 6 }).map((_, i) => (\n              <Skeleton key={i} className=\"h-48\" />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          <Coffee className=\"h-8 w-8 text-orange-600\" />\n          <h1 className=\"text-3xl font-bold text-gray-900\">Panel de Cocina</h1>\n        </div>\n        \n        {pendingCount > 0 && (\n          <div className=\"flex items-center gap-2 px-3 py-2 bg-orange-100 rounded-lg\">\n            <Bell className=\"h-4 w-4 text-orange-600\" />\n            <span className=\"text-sm font-medium text-orange-800\">\n              {pendingCount} pedido{pendingCount !== 1 ? 's' : ''} pendiente{pendingCount !== 1 ? 's' : ''}\n            </span>\n          </div>\n        )}\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-500 mb-1\">Pedidos Pendientes</p>\n                <p className=\"text-2xl font-bold text-orange-600\">{pendingCount}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-orange-100 rounded-full flex items-center justify-center\">\n                <Clock className=\"text-orange-600 h-5 w-5\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-500 mb-1\">Pedidos Completados</p>\n                <p className=\"text-2xl font-bold text-green-600\">{completedCount}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n                <CheckCircle2 className=\"text-green-600 h-5 w-5\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-500 mb-1\">Total de Pedidos</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{orders?.length || 0}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center\">\n                <Coffee className=\"text-gray-600 h-5 w-5\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filter Tabs */}\n      <div className=\"flex gap-2\">\n        <Button\n          variant={selectedStatus === 'pending' ? 'default' : 'outline'}\n          onClick={() => setSelectedStatus('pending')}\n          className=\"flex items-center gap-2\"\n        >\n          <Clock className=\"h-4 w-4\" />\n          Pendientes ({pendingCount})\n        </Button>\n        <Button\n          variant={selectedStatus === 'completed' ? 'default' : 'outline'}\n          onClick={() => setSelectedStatus('completed')}\n          className=\"flex items-center gap-2\"\n        >\n          <CheckCircle2 className=\"h-4 w-4\" />\n          Completados ({completedCount})\n        </Button>\n        <Button\n          variant={selectedStatus === 'all' ? 'default' : 'outline'}\n          onClick={() => setSelectedStatus('all')}\n          className=\"flex items-center gap-2\"\n        >\n          Todos ({orders?.length || 0})\n        </Button>\n      </div>\n\n      {/* Orders List */}\n      {filteredOrders.length === 0 ? (\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <Coffee className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n              {selectedStatus === 'pending' ? 'No hay pedidos pendientes' : \n               selectedStatus === 'completed' ? 'No hay pedidos completados' : \n               'No hay pedidos registrados'}\n            </h3>\n            <p className=\"text-gray-500\">\n              {selectedStatus === 'pending' \n                ? 'Los nuevos pedidos aparecer√°n aqu√≠ cuando se solicite servicio de caf√© en las reservas.'\n                : 'Los pedidos aparecer√°n aqu√≠ una vez que sean procesados.'}\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n          {filteredOrders.map((order) => (\n            <Card key={order.id} className={`${order.status === 'pending' ? 'border-orange-200 bg-orange-50' : 'border-green-200 bg-green-50'}`}>\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-lg\">{order.booking.title}</CardTitle>\n                  <Badge \n                    variant={order.status === 'pending' ? 'destructive' : 'default'}\n                    className={order.status === 'pending' ? 'bg-orange-100 text-orange-800 border-orange-200' : 'bg-green-100 text-green-800 border-green-200'}\n                  >\n                    {order.status === 'pending' ? 'Pendiente' : 'Completado'}\n                  </Badge>\n                </div>\n                <div className=\"text-sm text-gray-600\">\n                  <div className=\"flex items-center gap-2\">\n                    <Users className=\"h-4 w-4\" />\n                    <span>{order.room.name}</span>\n                  </div>\n                </div>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-3\">\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <p className=\"font-medium text-gray-700\">Fecha y Hora</p>\n                    <p className=\"text-gray-600\">\n                      {format(parseISO(order.orderDate), \"dd 'de' MMMM\", { locale: es })}\n                    </p>\n                    <p className=\"text-gray-600\">{order.orderTime}</p>\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-gray-700\">Solicitado por</p>\n                    <p className=\"text-gray-600\">{order.user.fullName}</p>\n                  </div>\n                </div>\n                \n                <Separator />\n                \n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <Users className=\"h-4 w-4 text-gray-500\" />\n                    <span className=\"font-medium\">Personas: {order.peopleCount}</span>\n                  </div>\n                  \n                  {order.requestedMeals && (\n                    <div className=\"flex items-start gap-2 text-sm\">\n                      <Utensils className=\"h-4 w-4 text-gray-500 mt-0.5\" />\n                      <div>\n                        <span className=\"font-medium\">Comidas:</span>\n                        <p className=\"text-gray-600 mt-1\">{order.requestedMeals}</p>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {order.requestedDrinks && (\n                    <div className=\"flex items-start gap-2 text-sm\">\n                      <Coffee className=\"h-4 w-4 text-gray-500 mt-0.5\" />\n                      <div>\n                        <span className=\"font-medium\">Bebidas:</span>\n                        <p className=\"text-gray-600 mt-1\">{order.requestedDrinks}</p>\n                      </div>\n                    </div>\n                  )}\n                </div>\n                \n                {order.status === 'pending' && (\n                  <Button\n                    onClick={() => completeOrderMutation.mutate(order.id)}\n                    disabled={completeOrderMutation.isPending}\n                    className=\"w-full bg-green-600 hover:bg-green-700 mt-4\"\n                  >\n                    <CheckCircle2 className=\"h-4 w-4 mr-2\" />\n                    {completeOrderMutation.isPending ? 'Procesando...' : 'Marcar como Atendido'}\n                  </Button>\n                )}\n                \n                {order.status === 'completed' && order.completedAt && (\n                  <div className=\"text-xs text-green-600 bg-green-50 p-2 rounded\">\n                    Completado el {format(parseISO(order.completedAt), \"dd/MM/yyyy 'a las' HH:mm\", { locale: es })}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":11007},"scripts/add-kitchen-features.ts":{"content":"import { db } from \"../server/db\";\nimport { sql } from \"drizzle-orm\";\n\nasync function addKitchenFeatures() {\n  console.log(\"üîß Adding kitchen management features to SQLite database...\");\n\n  try {\n    // Add isKitchen column to users table\n    await db.run(sql`ALTER TABLE users ADD COLUMN is_kitchen INTEGER DEFAULT 0`);\n    console.log(\"‚úÖ Added is_kitchen column to users table\");\n\n    // Add kitchen staff column to rooms table  \n    await db.run(sql`ALTER TABLE rooms ADD COLUMN kitchen_staff TEXT`);\n    console.log(\"‚úÖ Added kitchen_staff column to rooms table\");\n\n    // Add cafe-related columns to bookings table\n    await db.run(sql`ALTER TABLE bookings ADD COLUMN cafe_requested INTEGER DEFAULT 0`);\n    await db.run(sql`ALTER TABLE bookings ADD COLUMN people_count INTEGER`);\n    await db.run(sql`ALTER TABLE bookings ADD COLUMN requested_meals TEXT`);\n    await db.run(sql`ALTER TABLE bookings ADD COLUMN requested_drinks TEXT`);\n    console.log(\"‚úÖ Added cafe service columns to bookings table\");\n\n    // Create kitchen_orders table\n    await db.run(sql`\n      CREATE TABLE kitchen_orders (\n        id TEXT PRIMARY KEY,\n        booking_id TEXT NOT NULL REFERENCES bookings(id),\n        room_id TEXT NOT NULL REFERENCES rooms(id),\n        user_id TEXT NOT NULL REFERENCES users(id),\n        people_count INTEGER NOT NULL,\n        requested_meals TEXT NOT NULL,\n        requested_drinks TEXT NOT NULL,\n        status TEXT NOT NULL DEFAULT 'pending',\n        order_date TEXT NOT NULL,\n        order_time TEXT NOT NULL,\n        completed_at TEXT,\n        completed_by TEXT,\n        created_at TEXT NOT NULL DEFAULT (datetime('now'))\n      )\n    `);\n    console.log(\"‚úÖ Created kitchen_orders table\");\n\n    // Give kitchen permissions to admin users\n    await db.run(sql`UPDATE users SET is_kitchen = 1 WHERE is_admin = 1`);\n    console.log(\"‚úÖ Granted kitchen permissions to admin users\");\n\n    console.log(\"üéâ Kitchen management features added successfully!\");\n\n  } catch (error) {\n    console.error(\"‚ùå Error adding kitchen features:\", error);\n    throw error;\n  }\n}\n\naddKitchenFeatures().catch(console.error);","size_bytes":2131},"scripts/add-kitchen-user.ts":{"content":"import { db } from \"../server/db\";\nimport { users } from \"../shared/schema\";\nimport { eq } from \"drizzle-orm\";\nimport crypto from \"crypto\";\n\nconst KITCHEN_USER = {\n  username: \"chef\",\n  email: \"chef@pindo.com.py\", \n  fullName: \"Maria Gonz√°lez\",\n  position: \"Chef Principal\",\n  isAdmin: false,\n  isKitchen: true,\n  password: \"cocina123\"\n};\n\nasync function hashPassword(password: string): Promise<string> {\n  return new Promise((resolve, reject) => {\n    crypto.scrypt(password, 'salt', 64, (err, derivedKey) => {\n      if (err) reject(err);\n      resolve(derivedKey.toString('hex'));\n    });\n  });\n}\n\nasync function addKitchenUser() {\n  try {\n    console.log('üë®‚Äçüç≥ Creating kitchen user...');\n    \n    // Check if user already exists\n    const existingUser = await db\n      .select()\n      .from(users)\n      .where(eq(users.username, KITCHEN_USER.username))\n      .limit(1);\n    \n    if (existingUser.length > 0) {\n      console.log('üë®‚Äçüç≥ Kitchen user already exists, updating to kitchen role...');\n      \n      // Update existing user to have kitchen permissions\n      await db\n        .update(users)\n        .set({ \n          isKitchen: 1,\n          fullName: KITCHEN_USER.fullName,\n          position: KITCHEN_USER.position \n        })\n        .where(eq(users.username, KITCHEN_USER.username));\n      \n      console.log('‚úÖ Kitchen user updated successfully');\n      return;\n    }\n    \n    // Hash password\n    const hashedPassword = await hashPassword(KITCHEN_USER.password);\n    \n    // Create new kitchen user\n    await db.insert(users).values({\n      username: KITCHEN_USER.username,\n      email: KITCHEN_USER.email,\n      fullName: KITCHEN_USER.fullName,\n      position: KITCHEN_USER.position,\n      isAdmin: KITCHEN_USER.isAdmin ? 1 : 0,\n      isKitchen: KITCHEN_USER.isKitchen ? 1 : 0,\n      password: hashedPassword, // Use 'password' field instead of 'passwordHash'\n    });\n    \n    console.log('‚úÖ Kitchen user created successfully');\n    console.log(`üìß Username: ${KITCHEN_USER.username}`);\n    console.log(`üîë Password: ${KITCHEN_USER.password}`);\n    \n  } catch (error) {\n    console.error('‚ùå Error creating kitchen user:', error);\n  }\n}\n\naddKitchenUser().then(() => {\n  console.log('üë®‚Äçüç≥ Kitchen user setup completed');\n  process.exit(0);\n});","size_bytes":2290},"scripts/add-kitchen-assignment-field.ts":{"content":"import { db } from \"../server/db\";\n\nasync function addKitchenAssignmentField() {\n  try {\n    console.log('üîß Adding assignedKitchenUserId field to rooms table...');\n    \n    // Add the new column to the rooms table\n    await db.run(`\n      ALTER TABLE rooms \n      ADD COLUMN assigned_kitchen_user_id TEXT \n      REFERENCES users(id)\n    `);\n    \n    console.log('‚úÖ Kitchen assignment field added successfully');\n    \n  } catch (error) {\n    // If the column already exists, that's fine\n    if (error.message.includes('duplicate column name')) {\n      console.log('üìù Kitchen assignment field already exists');\n    } else {\n      console.error('‚ùå Error adding kitchen assignment field:', error);\n    }\n  }\n}\n\naddKitchenAssignmentField().then(() => {\n  console.log('üîß Migration completed');\n  process.exit(0);\n});","size_bytes":823},"scripts/assign-kitchen-users.ts":{"content":"import { db } from '../server/db-sqlite.js';\nimport { rooms, users } from '../shared/schema.js';\nimport { eq } from 'drizzle-orm';\n\nasync function assignKitchenUsers() {\n  console.log('üîß Asignando usuarios de cocina a salas...\\n');\n  \n  // Get all rooms and kitchen users\n  const roomsData = await db.select().from(rooms).where(eq(rooms.isActive, true));\n  const kitchenUsers = await db.select().from(users).where(eq(users.isKitchen, 1));\n  \n  console.log(`üìç Salas encontradas: ${roomsData.length}`);\n  console.log(`üë• Usuarios de cocina encontrados: ${kitchenUsers.length}\\n`);\n  \n  // Assign kitchen users to rooms\n  const assignments = [\n    { roomName: 'Sala de Reuni√£o Principal', userId: kitchenUsers[0]?.id }, // Miriam\n    { roomName: 'Sala de Videoconfer√™ncia', userId: kitchenUsers[1]?.id }, // Lucas\n    { roomName: 'Audit√≥rio', userId: kitchenUsers[2]?.id }, // lucas souza santos (ya asignado)\n    { roomName: 'Sala de Brainstorm', userId: kitchenUsers[0]?.id }, // Miriam\n  ];\n  \n  for (const assignment of assignments) {\n    const room = roomsData.find(r => r.name === assignment.roomName);\n    if (room && assignment.userId) {\n      const kitchenUser = kitchenUsers.find(u => u.id === assignment.userId);\n      \n      await db.update(rooms)\n        .set({ assignedKitchenUserId: assignment.userId })\n        .where(eq(rooms.id, room.id));\n      \n      console.log(`‚úÖ ${room.name} ‚Üí ${kitchenUser?.fullName} (${kitchenUser?.username})`);\n    } else {\n      console.log(`‚ùå No se pudo asignar: ${assignment.roomName}`);\n    }\n  }\n  \n  console.log('\\nüéâ Asignaciones completadas!');\n}\n\nassignKitchenUsers().catch(console.error);","size_bytes":1659},"scripts/check-kitchen-assignments.ts":{"content":"import { db } from '../server/db-sqlite.js';\nimport { rooms, users } from '../shared/schema.js';\nimport { eq } from 'drizzle-orm';\n\nasync function checkKitchenAssignments() {\n  console.log('üîç Verificando asignaciones de cocina...\\n');\n  \n  // Get all rooms with their assigned kitchen users\n  const roomsData = await db.select({\n    id: rooms.id,\n    name: rooms.name,\n    assignedKitchenUserId: rooms.assignedKitchenUserId,\n    isActive: rooms.isActive\n  }).from(rooms).where(eq(rooms.isActive, true));\n  \n  console.log('üìã Salas activas:');\n  for (const room of roomsData) {\n    console.log(`- ${room.name} (ID: ${room.id})`);\n    if (room.assignedKitchenUserId) {\n      const kitchenUser = await db.select({\n        fullName: users.fullName,\n        username: users.username,\n        isKitchen: users.isKitchen\n      }).from(users).where(eq(users.id, room.assignedKitchenUserId));\n      \n      if (kitchenUser.length > 0) {\n        console.log(`  ‚úÖ Usuario de cocina asignado: ${kitchenUser[0].fullName} (${kitchenUser[0].username}) - isKitchen: ${kitchenUser[0].isKitchen}`);\n      } else {\n        console.log(`  ‚ùå Usuario de cocina asignado no encontrado: ${room.assignedKitchenUserId}`);\n      }\n    } else {\n      console.log(`  ‚ö†Ô∏è  Sin usuario de cocina asignado`);\n    }\n    console.log('');\n  }\n  \n  // Get all kitchen users\n  const kitchenUsers = await db.select({\n    id: users.id,\n    fullName: users.fullName,\n    username: users.username,\n    isKitchen: users.isKitchen\n  }).from(users).where(eq(users.isKitchen, 1));\n  \n  console.log('üë• Usuarios de cocina disponibles:');\n  for (const user of kitchenUsers) {\n    console.log(`- ${user.fullName} (${user.username}) - ID: ${user.id}`);\n  }\n}\n\ncheckKitchenAssignments().catch(console.error);","size_bytes":1771},"scripts/fix-user-data.ts":{"content":"import { db } from '../server/db-sqlite.js';\nimport { users } from '../shared/schema.js';\nimport { isNull } from 'drizzle-orm';\n\nasync function fixUserData() {\n  console.log('üîß Limpiando datos de usuarios problem√°ticos...\\n');\n  \n  // Remove users with null IDs\n  const deletedUsers = await db\n    .delete(users)\n    .where(isNull(users.id))\n    .returning();\n  \n  console.log(`üóëÔ∏è  Usuarios con ID null eliminados: ${deletedUsers.length}`);\n  \n  // Check remaining users\n  const allUsers = await db.select().from(users);\n  console.log(`üë• Usuarios restantes: ${allUsers.length}`);\n  \n  for (const user of allUsers) {\n    console.log(`- ${user.fullName} (${user.username}) - ID: ${user.id} - Kitchen: ${user.isKitchen}`);\n  }\n  \n  console.log('\\n‚úÖ Limpieza completada!');\n}\n\nfixUserData().catch(console.error);","size_bytes":822},"client/src/hooks/use-websocket.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { useAuth } from \"./use-auth\";\n\nexport type WebSocketMessage = {\n  type: string;\n  order?: any;\n  booking?: any;\n  message?: string;\n};\n\nexport function useWebSocket() {\n  const { user } = useAuth();\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastMessage, setLastMessage] = useState<WebSocketMessage | null>(null);\n  const lastMessageRef = useRef<WebSocketMessage | null>(null);\n  const ws = useRef<WebSocket | null>(null);\n  const reconnectTimeout = useRef<NodeJS.Timeout | null>(null);\n  const isConnecting = useRef(false);\n\n  const connect = () => {\n    if (!user?.isKitchen || isConnecting.current || ws.current?.readyState === WebSocket.CONNECTING) return;\n\n    isConnecting.current = true;\n    \n    try {\n      const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n      const wsUrl = `${protocol}//${window.location.host}/ws`;\n      \n      ws.current = new WebSocket(wsUrl);\n\n      ws.current.onopen = () => {\n        console.log(\"üîó WebSocket connected\");\n        setIsConnected(true);\n        isConnecting.current = false;\n        \n        // Identify as kitchen user\n        ws.current?.send(JSON.stringify({\n          type: 'KITCHEN_USER_CONNECT',\n          userId: user.id\n        }));\n      };\n\n      ws.current.onmessage = (event) => {\n        try {\n          const message: WebSocketMessage = JSON.parse(event.data);\n          console.log(\"üì® Received WebSocket message:\", message);\n          \n          // Only trigger notifications for actual new orders, not connection confirmations\n          if (message.type === 'NEW_KITCHEN_ORDER') {\n            // Prevent duplicate notifications by checking message content\n            const messageKey = `${message.type}-${message.order?.id}-${Date.now()}`;\n            if (lastMessageRef.current?.order?.id !== message.order?.id) {\n              setLastMessage(message);\n              lastMessageRef.current = message;\n            }\n          } else {\n            // For non-notification messages, just log them\n            console.log(\"üìã System message:\", message);\n          }\n        } catch (error) {\n          console.error(\"Error parsing WebSocket message:\", error);\n        }\n      };\n\n      ws.current.onclose = () => {\n        console.log(\"üîå WebSocket disconnected\");\n        setIsConnected(false);\n        isConnecting.current = false;\n        \n        // Clear any existing reconnect timeout\n        if (reconnectTimeout.current) {\n          clearTimeout(reconnectTimeout.current);\n        }\n        \n        // Attempt to reconnect after 3 seconds only if user is still a kitchen user\n        if (user?.isKitchen && !isConnecting.current) {\n          reconnectTimeout.current = setTimeout(() => {\n            console.log(\"üîÑ Attempting to reconnect WebSocket...\");\n            connect();\n          }, 3000);\n        }\n      };\n\n      ws.current.onerror = (error) => {\n        console.error(\"‚ùå WebSocket error:\", error);\n        setIsConnected(false);\n        isConnecting.current = false;\n      };\n    } catch (error) {\n      console.error(\"Failed to create WebSocket connection:\", error);\n    }\n  };\n\n  const disconnect = () => {\n    if (reconnectTimeout.current) {\n      clearTimeout(reconnectTimeout.current);\n    }\n    \n    if (ws.current) {\n      ws.current.close();\n      ws.current = null;\n    }\n    \n    setIsConnected(false);\n  };\n\n  useEffect(() => {\n    if (user?.isKitchen) {\n      connect();\n    } else {\n      disconnect();\n    }\n\n    return () => {\n      disconnect();\n    };\n  }, [user?.isKitchen]); // Removed user?.id to prevent constant reconnections\n\n  return {\n    isConnected,\n    lastMessage,\n    connect,\n    disconnect\n  };\n}","size_bytes":3736}},"version":1}